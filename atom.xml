<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hackjutsu Dojo</title>
  <subtitle>I code therefore I am.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hackjutsu.com/"/>
  <updated>2016-11-18T08:12:23.000Z</updated>
  <id>http://hackjutsu.com/</id>
  
  <author>
    <name>Cosmo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS学习 Primitive vs Object</title>
    <link href="http://hackjutsu.com/2016/11/17/JS%E5%AD%A6%E4%B9%A0%20Primitive%20vs%20Object/"/>
    <id>http://hackjutsu.com/2016/11/17/JS学习 Primitive vs Object/</id>
    <published>2016-11-18T02:00:02.000Z</published>
    <updated>2016-11-18T08:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript有五种Primitive: <code>string</code>、<code>number</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code>。除了<code>null</code>和<code>undefined</code>，其余Primitive都有对应的Object封装，如Object <code>String</code>对应<code>string</code>。</p>
<p>Objects 是properties的聚合，其property 可以是Object也可以是Primitive。Primitive有value, 但没有properties。</p>
<a id="more"></a>
<h2 id="Stack-vs-Heap"><a href="#Stack-vs-Heap" class="headerlink" title="Stack vs Heap"></a>Stack vs Heap</h2><p>Javascript是一门动态语言，同一个variable在不同时候可能被赋予不同值，比如前面是number而后面变成Object。因此Javascript变量的value所占用的内存空间是动态变化的。实际上，不管是Primitive还是Object，这些Javascript变量的值都存储在heap上。它在stack上保存的则是一个size固定的包含heap位置信息的引用（类似pointer）。JS engine通过对引用指向的修改来实现同一个variable指向不同的数据类型。</p>
<blockquote>
<p>It’s wrong to state that primitives are allocated from the stack and only objects are allocated from the heap. This is the biggest difference between C and JavaScript.</p>
</blockquote>
<p>最新的JS engine做了很多优化，使得内存分配更为高效和复杂，具体可参考该<a href="http://stackoverflow.com/a/10618981/3697757" target="_blank" rel="external">StackOverflow回答</a>。</p>
<h2 id="值传递-vs-引用传递"><a href="#值传递-vs-引用传递" class="headerlink" title="值传递 vs 引用传递"></a>值传递 vs 引用传递</h2><p>Primitive是<strong>值传递（passed by value</strong>），Object是<strong>引用传递（passed by reference）</strong>。</p>
<p>上面说到，Javascript变量在stack保存的是地址引用，为什么又说Primitive是值传递呢？在传递Primitive时，JS engine在heap上复制一个值相同的Primitive，然后把新变量的引用传递出去，这就是所谓JS中的值传递。注意，Javascript中所有Primitive都是immutable。对于Object，JS Engine并不会复制一个新的Object，而是直接传递它的引用（C++/Java中的引用传递类似）。</p>
<blockquote>
<p>该引用能识别其指向的变量是Primitive还是Object，所以它不是一个简单的pointer，而是一个“能引用”。</p>
</blockquote>
<h2 id="对Prototype影响"><a href="#对Prototype影响" class="headerlink" title="对Prototype影响"></a>对Prototype影响</h2><p>在Javascript中，子类修改父类的property会影响到所有继承该父类的子类。但是这种影响会因为父类property是属于Primitive还是Object而有微妙差别。</p>
<p>我们设想有一个父类<code>father</code>，和两个继承了他的子类<code>son1</code>和<code>son2</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> father = &#123;</div><div class="line">    <span class="attr">primitive</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">object</span>: &#123;</div><div class="line">        <span class="attr">fruit</span>: <span class="string">"APPLE"</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> son1 = <span class="built_in">Object</span>.create(father);</div><div class="line"><span class="keyword">var</span> son2 = <span class="built_in">Object</span>.create(father);</div></pre></td></tr></table></figure></p>
<h3 id="Primitive-Property"><a href="#Primitive-Property" class="headerlink" title="Primitive Property"></a>Primitive Property</h3><p>如果父类的property是Primitive，该property通过<code>passed by value</code>传递到子类。这时，子类修改该property不会影响到父类本身，更不会传递到其他子类上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"father's primitive is "</span> + father.primitive);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"son1's primitive is "</span> + son1.primitive);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"son2's primitive is "</span> + son2.primitive);</div><div class="line"><span class="comment">// father's primitive is 1</span></div><div class="line"><span class="comment">// son1's primitive is 1</span></div><div class="line"><span class="comment">// son2's primitive is 1</span></div><div class="line"></div><div class="line">son1.primitive = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"father's primitive is "</span> + father.primitive);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"son1's primitive is "</span> + son1.primitive);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"son2's primitive is "</span> + son2.primitive);</div><div class="line"><span class="comment">// father's primitive is 1</span></div><div class="line"><span class="comment">// son1's primitive is 2</span></div><div class="line"><span class="comment">// son2's primitive is 1</span></div></pre></td></tr></table></figure></p>
<h3 id="Object-Property"><a href="#Object-Property" class="headerlink" title="Object Property"></a>Object Property</h3><p>如果父类的property是Object，该property通过<code>passed by reference</code>传递到子类上。子类对父类property的修改会通过父类传递到所有继承它的子类上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"father's fruit is "</span> + father.object.fruit);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"son1's fruit is "</span> + son1.object.fruit);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"son2's fruit is "</span> + son2.object.fruit);</div><div class="line"><span class="comment">// father's fruit is APPLE</span></div><div class="line"><span class="comment">// son1's fruit is APPLE</span></div><div class="line"><span class="comment">// son2's fruit is APPLE</span></div><div class="line"></div><div class="line">son1.object.fruit = <span class="string">"GRAPE"</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"father's fruit is "</span> + father.object.fruit);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"son1's fruit is "</span> + son1.object.fruit);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"son2's fruit is "</span> + son2.object.fruit);</div><div class="line"><span class="comment">// father's fruit is GRAPE</span></div><div class="line"><span class="comment">// son1's fruit is GRAPE</span></div><div class="line"><span class="comment">// son2's fruit is GRAPE</span></div></pre></td></tr></table></figure></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://stackoverflow.com/a/13268731/3697757" target="_blank" rel="external">Primitive value vs Reference value</a><br><a href="http://stackoverflow.com/a/10618981/3697757" target="_blank" rel="external">How variables are allocated memory in Javascript?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Javascript有五种Primitive: &lt;code&gt;string&lt;/code&gt;、&lt;code&gt;number&lt;/code&gt;、&lt;code&gt;boolean&lt;/code&gt;、&lt;code&gt;null&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;。除了&lt;code&gt;null&lt;/code&gt;和&lt;code&gt;undefined&lt;/code&gt;，其余Primitive都有对应的Object封装，如Object &lt;code&gt;String&lt;/code&gt;对应&lt;code&gt;string&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Objects 是properties的聚合，其property 可以是Object也可以是Primitive。Primitive有value, 但没有properties。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://hackjutsu.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS学习 Syntax Parser</title>
    <link href="http://hackjutsu.com/2016/11/17/JS%E5%AD%A6%E4%B9%A0%20Syntax%20Parser/"/>
    <id>http://hackjutsu.com/2016/11/17/JS学习 Syntax Parser/</id>
    <published>2016-11-18T02:00:00.000Z</published>
    <updated>2016-11-18T00:51:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>一门语言的执行，大致经历下面这些过程：词法分析 – 语法分析 – 语义分析 – 中间代码生成 – 优化代码 – 代码生成。在Javascript中，Syntax Parser的作用是进行<strong>词法分析</strong>和<strong>语法分析</strong>。</p>
<blockquote>
<p>A program that reads your code and determines what it does and if its grammar is valid.</p>
</blockquote>
<p>词法分析挨个字符地扫描代码，把关键token识别出来。语法分析利用词法分析的结果建立上下文关系<strong>语法树</strong> Abstract Syntax Tree (AST)。一般情况下，我们不会直接和语法树打交道，但会在进行Uglify代码压缩、IDE语法高亮、Babel重编译、关键字匹配和作用域判断时候涉及到。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> AST = <span class="string">"is Tree"</span>;</div></pre></td></tr></table></figure>
<p><img src="/images/20161117_js_parser_ast.PNG" alt=""></p>
<p>传统的Javascript引擎直接根据语法树的的结果进行解释执行，导致效率比C/C++较为低下。一些最新的Javascript引擎（如V8），会将部分Javascript代码编译成为目标代码以提高执行效率。</p>
<p>介绍几个Javascript的Syntax Parser</p>
<ul>
<li><a href="https://github.com/ariya/esprima" target="_blank" rel="external">esprima</a></li>
<li><a href="https://github.com/ternjs/acorn" target="_blank" rel="external">acorn</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://wwsun.github.io/posts/javascript-ast-tutorial.html" target="_blank" rel="external">Javascirpt AST Tutorial</a></li>
<li><a href="http://purplebamboo.github.io/2014/09/27/javascript-syntax-tree" target="_blank" rel="external">Javascript Syntax Tree</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一门语言的执行，大致经历下面这些过程：词法分析 – 语法分析 – 语义分析 – 中间代码生成 – 优化代码 – 代码生成。在Javascript中，Syntax Parser的作用是进行&lt;strong&gt;词法分析&lt;/strong&gt;和&lt;strong&gt;语法分析&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A program that reads your code and determines what it does and if its grammar is valid.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;词法分析挨个字符地扫描代码，把关键token识别出来。语法分析利用词法分析的结果建立上下文关系&lt;strong&gt;语法树&lt;/strong&gt; Abstract Syntax Tree (AST)。一般情况下，我们不会直接和语法树打交道，但会在进行Uglify代码压缩、IDE语法高亮、Babel重编译、关键字匹配和作用域判断时候涉及到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://hackjutsu.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS学习 Array Essentials</title>
    <link href="http://hackjutsu.com/2016/10/15/JS%E5%AD%A6%E4%B9%A0%20Array%20Essentials/"/>
    <id>http://hackjutsu.com/2016/10/15/JS学习 Array Essentials/</id>
    <published>2016-10-16T01:00:45.000Z</published>
    <updated>2016-11-18T01:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://roshiro.github.io/cdn/images/array_lg.png" style="max-height: 120px;"></p>
<p>JavaScript arrays are used to store multiple values in a single variable. The topics covered are summerized below.</p>
<ul>
<li>Creating an Array</li>
<li>How to Recognize an Array</li>
<li>Array Properties and Methods<ul>
<li>pop &amp; push</li>
<li>shift &amp; unshift</li>
<li>splice/join/delete/find/slice</li>
</ul>
</li>
</ul>
<a id="more"></a>
<blockquote>
<p>Disclaimer: This is my note for Javascript study where part of the content is copied from other sources. Please go to the Reference part to see the original posts.</p>
</blockquote>
<h2 id="Array-is-an-Object"><a href="#Array-is-an-Object" class="headerlink" title="Array is an Object"></a>Array is an Object</h2><p>Arrays are a special type of objects. The <code>typeof</code> operator in JavaScript returns “object” for arrays.<br>But, JavaScript arrays are best described as arrays. Arrays use numbers to access its “elements”, rather than a self-defined named key.</p>
<h2 id="Creating-an-Array"><a href="#Creating-an-Array" class="headerlink" title="Creating an Array"></a>Creating an Array</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// method1</span></div><div class="line"><span class="keyword">var</span> cars = [<span class="string">"Saab"</span>, <span class="string">"Volvo"</span>, <span class="string">"BMW"</span>];</div><div class="line"></div><div class="line"><span class="comment">// method2, exactly the same but complicated, should avoid</span></div><div class="line"><span class="keyword">var</span> cars = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Saab"</span>, <span class="string">"Volvo"</span>, <span class="string">"BMW"</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>Never put a comma after the last element (like “BMW”,).<br>The effect is inconsistent across browsers.</p>
</blockquote>
<h2 id="Array-Properties-and-Methods"><a href="#Array-Properties-and-Methods" class="headerlink" title="Array Properties and Methods"></a>Array Properties and Methods</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = cars.length;  <span class="comment">// The length property returns the number of elements</span></div><div class="line"><span class="keyword">var</span> y = cars.sort();  <span class="comment">// The sort() method sorts arrays</span></div><div class="line"><span class="keyword">var</span> z = cars.reverse(); <span class="comment">// The reverse() method reverts arrays</span></div></pre></td></tr></table></figure>
<h3 id="Popping-and-Pushing"><a href="#Popping-and-Pushing" class="headerlink" title="Popping and Pushing"></a>Popping and Pushing</h3><p>The <code>pop()</code> method removes the last element from an array and returns the value that was popped.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</div><div class="line"><span class="keyword">var</span> x = fruits.pop();      <span class="comment">// the value of x is "Mango"</span></div></pre></td></tr></table></figure></p>
<p>The <code>push()</code> method adds a new element to an array (at the end), and returns the new array length.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</div><div class="line"><span class="keyword">var</span> x = fruits.push(<span class="string">"Kiwi"</span>);   <span class="comment">//  the value of x is 5</span></div></pre></td></tr></table></figure></p>
<h3 id="Shifting-and-Unshifting"><a href="#Shifting-and-Unshifting" class="headerlink" title="Shifting and Unshifting"></a>Shifting and Unshifting</h3><p>Shifting is equivalent to popping, working on the first element instead of the last.<br>The <code>shift()</code> method removes the first array element and “shifts” all other elements to a lower index, and return the item that is shifted out.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</div><div class="line">fruits.shift();           <span class="comment">// Removes the first element "Banana" from fruits</span></div></pre></td></tr></table></figure></p>
<p>The <code>unshift()</code> method adds a new element to an array (at the beginning), and “unshifts” older elements, and return the new length.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</div><div class="line">fruits.unshift(<span class="string">"Lemon"</span>);    <span class="comment">// Adds a new element "Lemon" to fruits</span></div></pre></td></tr></table></figure></p>
<h3 id="Splicing-an-Array"><a href="#Splicing-an-Array" class="headerlink" title="Splicing an Array"></a>Splicing an Array</h3><p><code>splice()</code> can be used to add new elements to Array.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</div><div class="line">fruits.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">"Lemon"</span>, <span class="string">"Kiwi"</span>);</div><div class="line"><span class="comment">// [ 'Banana', 'Orange', 'Lemon', 'Kiwi', 'Apple', 'Mango' ]</span></div></pre></td></tr></table></figure></p>
<p>The first parameter (2) defines the position where new elements should be added (spliced in).<br>The second parameter (0) defines how many elements should be removed.<br>The rest of the parameters (“Lemon” , “Kiwi”) define the new elements to be added.</p>
<h3 id="Joining-Arrays"><a href="#Joining-Arrays" class="headerlink" title="Joining Arrays"></a>Joining Arrays</h3><h4 id="The-concat-method"><a href="#The-concat-method" class="headerlink" title="The concat() method"></a>The <code>concat()</code> method</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myGirls = [<span class="string">"Cecilie"</span>, <span class="string">"Lone"</span>];</div><div class="line"><span class="keyword">var</span> myBoys = [<span class="string">"Emil"</span>, <span class="string">"Tobias"</span>,<span class="string">"Linus"</span>];</div><div class="line"><span class="keyword">var</span> myChildren = myGirls.concat(myBoys);  <span class="comment">// Concatenates (joins) myGirls and myBoys</span></div></pre></td></tr></table></figure>
<h4 id="Using-the-ES6-spread-syntax"><a href="#Using-the-ES6-spread-syntax" class="headerlink" title="Using the ES6 spread syntax"></a>Using the ES6 <strong>spread</strong> syntax</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="keyword">const</span> arr3 = [...arr1, ...arr2] <span class="comment">//arr3 ==&gt; [1,2,3,4,5,6]</span></div></pre></td></tr></table></figure>
<h3 id="Deleting-Elements"><a href="#Deleting-Elements" class="headerlink" title="Deleting Elements"></a>Deleting Elements</h3><h4 id="Using-the-JavaScript-operator-delete"><a href="#Using-the-JavaScript-operator-delete" class="headerlink" title="Using the JavaScript operator delete"></a>Using the JavaScript operator <code>delete</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</div><div class="line"><span class="keyword">delete</span> fruits[<span class="number">0</span>];  <span class="comment">// Changes the first element in fruits to undefined</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Using delete may leave undefined holes in the array. Use pop() or shift() instead.</p>
</blockquote>
<h4 id="Using-splice-to-delete-an-element-without-holes"><a href="#Using-splice-to-delete-an-element-without-holes" class="headerlink" title="Using splice to delete an element without holes."></a>Using <code>splice</code> to delete an element without holes.</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</div><div class="line">fruits.splice(<span class="number">0</span>, <span class="number">1</span>);        <span class="comment">// Removes the first element of fruits</span></div></pre></td></tr></table></figure>
<p>The first parameter (0) defines the position where new elements should be added (spliced in).<br>The second parameter (1) defines how many elements should be removed.<br>The rest of the parameters are omitted. No new elements will be added.</p>
<h4 id="Using-filter-to-delete-an-element-without-holes"><a href="#Using-filter-to-delete-an-element-without-holes" class="headerlink" title="Using filter to delete an element without holes."></a>Using <code>filter</code> to delete an element without holes.</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</div><div class="line"><span class="keyword">var</span> toDelete = <span class="string">"Apple"</span>;</div><div class="line">fruits = fruits.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> value != toDelete;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// [ 'Banana', 'Orange', 'Mango' ]</span></div></pre></td></tr></table></figure>
<h3 id="Finding-an-Element"><a href="#Finding-an-Element" class="headerlink" title="Finding an Element"></a>Finding an Element</h3><p>The <code>find()</code> method returns the value of the first element in an array that pass a test (provided as a function).<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAdult</span>(<span class="params">age</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = ages.find(checkAdult);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Slicing-an-Array"><a href="#Slicing-an-Array" class="headerlink" title="Slicing an Array"></a>Slicing an Array</h3><p>The <code>slice()</code> method slices out a piece of an array into a new array. This example slices out a part of an array starting from array element 1 (“Orange”):<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Lemon"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</div><div class="line"><span class="keyword">var</span> citrus = fruits.slice(<span class="number">1</span>);</div><div class="line"><span class="comment">// Orange,Lemon,Apple,Mango</span></div></pre></td></tr></table></figure></p>
<p>The <code>slice()</code> method can take two arguments like <code>slice(1,3)</code>.<br>The method then selects elements from the start argument, and up to (but not including) the end argument.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Lemon"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</div><div class="line"><span class="keyword">var</span> citrus = fruits.slice(<span class="number">1</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure></p>
<p>If the end argument is omitted, like in the first examples, the <code>slice()</code> method slices out the rest of the array.</p>
<h2 id="How-to-Recognize-an-Array"><a href="#How-to-Recognize-an-Array" class="headerlink" title="How to Recognize an Array"></a>How to Recognize an Array</h2><p><strong>Solution 1</strong> (ES5)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.isArray(fruits);     <span class="comment">// returns true</span></div></pre></td></tr></table></figure></p>
<p><strong>Solution 2</strong>  create your own <code>isArray</code> function.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x.constructor.toString().indexOf(<span class="string">"Array"</span>) &gt; <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Solution 3</strong>  use <code>instanceof</code> operator<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fruits <span class="keyword">instanceof</span> <span class="built_in">Array</span>     <span class="comment">// returns true</span></div></pre></td></tr></table></figure></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.w3schools.com/js/js_arrays.asp" target="_blank" rel="external">http://www.w3schools.com/js/js_arrays.asp</a><br><a href="http://www.w3schools.com/js/js_array_methods.asp" target="_blank" rel="external">http://www.w3schools.com/js/js_array_methods.asp</a><br><a href="http://www.w3schools.com/jsref/jsref_filter.asp" target="_blank" rel="external">http://www.w3schools.com/jsref/jsref_filter.asp</a><br><a href="http://www.w3schools.com/jsref/jsref_find.asp" target="_blank" rel="external">http://www.w3schools.com/jsref/jsref_find.asp</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://roshiro.github.io/cdn/images/array_lg.png&quot; style=&quot;max-height: 120px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;JavaScript arrays are used to store multiple values in a single variable. The topics covered are summerized below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating an Array&lt;/li&gt;
&lt;li&gt;How to Recognize an Array&lt;/li&gt;
&lt;li&gt;Array Properties and Methods&lt;ul&gt;
&lt;li&gt;pop &amp;amp; push&lt;/li&gt;
&lt;li&gt;shift &amp;amp; unshift&lt;/li&gt;
&lt;li&gt;splice/join/delete/find/slice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://hackjutsu.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Cool URIs don&#39;t change</title>
    <link href="http://hackjutsu.com/2016/10/14/Cool%20URIs%20don%E2%80%99t%20change/"/>
    <id>http://hackjutsu.com/2016/10/14/Cool URIs don’t change/</id>
    <published>2016-10-15T01:00:01.000Z</published>
    <updated>2016-10-14T22:46:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a repost from <a href="https://www.w3.org/Provider/Style/URI" target="_blank" rel="external">here</a> for my reference. Please go to the original post for the most up-to-date information.</p>
<blockquote>
<p>What makes a cool URI?<br>A cool URI is one which does not change.<br>What sorts of URI change?<br>URIs don’t change: people change them.</p>
</blockquote>
<p>There are no reasons at all in theory for people to change URIs (or stop maintaining documents), but millions of reasons in practice.</p>
<a id="more"></a>
<p><strong>In theory, the domain name space owner owns the domain name space and therefore all URIs in it. Except insolvency, nothing prevents the domain name owner from keeping the name. And in theory the URI space under your domain name is totally under your control, so you can make it as stable as you like.</strong> Pretty much the only good reason for a document to disappear from the Web is that the company which owned the domain name went out of business or can no longer afford to keep the server running. Then why are there so many dangling links in the world? Part of it is just lack of forethought. Here are some reasons you hear out there:</p>
<h4 id="We-just-reorganized-our-website-to-make-it-better"><a href="#We-just-reorganized-our-website-to-make-it-better" class="headerlink" title="We just reorganized our website to make it better."></a>We just reorganized our website to make it better.</h4><p>Do you really feel that the old URIs cannot be kept running? If so, you chose them very badly. Think of your new ones so that you will be able to keep then running after the next redesign.</p>
<h4 id="We-have-so-much-material-that-we-can’t-keep-track-of-what-is-out-of-date-and-what-is-confidential-and-what-is-valid-and-so-we-thought-we’d-better-just-turn-the-whole-lot-off"><a href="#We-have-so-much-material-that-we-can’t-keep-track-of-what-is-out-of-date-and-what-is-confidential-and-what-is-valid-and-so-we-thought-we’d-better-just-turn-the-whole-lot-off" class="headerlink" title="We have so much material that we can’t keep track of what is out of date and what is confidential and what is valid and so we thought we’d better just turn the whole lot off."></a>We have so much material that we can’t keep track of what is out of date and what is confidential and what is valid and so we thought we’d better just turn the whole lot off.</h4><p>That I can sympathize with - the W3C went through a period like that, when we had to carefully sift archival material for confidentiality before making the archives public. The solution is forethought - make sure you capture with every document its acceptable distribution, its creation date and ideally its expiry date. Keep this metadata.</p>
<h4 id="Well-we-found-we-had-to-move-the-files…"><a href="#Well-we-found-we-had-to-move-the-files…" class="headerlink" title="Well, we found we had to move the files…"></a>Well, we found we had to move the files…</h4><p>This is one of the lamest excuses. A lot of people don’t know that servers such as Apache give you a lot of control over a flexible relationship between the URI of an object and where a file which represents it actually is in a file system. Think of the URI space as an abstract space, perfectly organized. Then, make a mapping onto whatever reality you actually use to implement it. Then, tell your server. You can even write bits of your server to make it just right.</p>
<p>John doesn’t maintain that file any more, Jane does.</p>
<p>Whatever was that URI doing with John’s name in it? It was in his directory? I see.</p>
<h4 id="We-used-to-use-a-cgi-script-for-this-and-now-we-use-a-binary-program"><a href="#We-used-to-use-a-cgi-script-for-this-and-now-we-use-a-binary-program" class="headerlink" title="We used to use a cgi script for this and now we use a binary program."></a>We used to use a cgi script for this and now we use a binary program.</h4><p>There is a crazy notion that pages produced by scripts have to be located in a “cgibin” or “cgi” area. This is exposing the mechanism of how you run your server. You change the mechanism (even keeping the content the same ) and whoops - all your URIs change.</p>
<p>For example, take the National Science Foundation:</p>
<p>NSF Online Documents<br><a href="http://www.nsf.gov/cgi-bin/pubsys/browser/odbrowse.pl" target="_blank" rel="external">http://www.nsf.gov/cgi-bin/pubsys/browser/odbrowse.pl</a></p>
<p>the main page for starting to look for documents, is clearly not going to be something to trust to being there in a few years. “cgi-bin” and “oldbrowse” and “.pl” all point to bits of how-we-do-it-now. By contrast, if you use the page to find a document, you get first an equally bad</p>
<p>Report of Working Group on Cryptology and Coding Theory<br><a href="http://www.nsf.gov/cgi-bin/getpub?nsf9814" target="_blank" rel="external">http://www.nsf.gov/cgi-bin/getpub?nsf9814</a></p>
<p>for the document’s index page, but the html document itself by contrast is very much better:</p>
<p><a href="http://www.nsf.gov/pubs/1998/nsf9814/nsf9814.htm" target="_blank" rel="external">http://www.nsf.gov/pubs/1998/nsf9814/nsf9814.htm</a></p>
<p>Looking at this one, the “pubs/1998” header is going to give any future archive service a good clue that the old 1998 document classification scheme is in progress. Though in 2098 the document numbers might look different, I can imagine this URI still being valid, and the NSF or whatever carries on the archive not being at all embarrassed about it.</p>
<h4 id="I-didn’t-think-URLs-have-to-be-persistent-that-was-URNs"><a href="#I-didn’t-think-URLs-have-to-be-persistent-that-was-URNs" class="headerlink" title="I didn’t think URLs have to be persistent - that was URNs."></a>I didn’t think URLs have to be persistent - that was URNs.</h4><p>This is the probably one of the worst side-effects of the URN discussions. Some seem to think that because there is research about namespaces which will be more persistent, that they can be as lax about dangling links as they like as “URNs will fix all that”. If you are one of these folks, then allow me to disillusion you.</p>
<p>Most URN schemes I have seen look something like an authority ID followed by either a date and a string you choose, or just a string you choose. This looks very like an HTTP URI. In other words, if you think your organization will be capable of creating URNs which will last, then prove it by doing it now and using them for your HTTP URIs. There is nothing about HTTP which makes your URIs unstable. It is your organization. Make a database which maps document URN to current filename, and let the web server use that to actually retrieve files.</p>
<p>If you have gotten to this point, then unless you have the time and money and contacts to get some software design done, then you might claim the next excuse:</p>
<h4 id="We-would-like-to-but-we-just-don’t-have-the-right-tools"><a href="#We-would-like-to-but-we-just-don’t-have-the-right-tools" class="headerlink" title="We would like to, but we just don’t have the right tools."></a>We would like to, but we just don’t have the right tools.</h4><p>Now here is one I can sympathize with. I agree entirely. What you need to do is to have the web server look up a persistent URI in an instant and return the file, wherever your current crazy file system has it stored away at the moment. You would like to be able to store the URI in the file as a check, and constantly keep the database in tune with actuality. You’d like to store the relationships between different versions and translations of the same document, and you’d like to keep an independent record of the checksum to provide a guard against file corruption by accidental error. And web servers just don’t come out of the box with these features. When you want to create a new document, your editor asks you for a URI instead of telling you.</p>
<p>You need to be able to change things like ownership, access, archive level security level, and so on, of a document in the URI space without changing the URI.</p>
<p>Too bad. But we’ll get there. At W3C we use Jigedit functionality (Jigsaw server used for editing) which does track versions, and we are experimenting with document creation scripts. If you make tools, servers and clients, take note!</p>
<p>This is an outstanding reason, which applies for example to many W3C pages including this one: so do what I say, not what I do.</p>
<h2 id="Why-should-I-care"><a href="#Why-should-I-care" class="headerlink" title="Why should I care?"></a>Why should I care?</h2><p>When you change a URI on your server, you can never completely tell who will have links to the old URI. They might have made links from regular web pages. They might have bookmarked your page. They might have scrawled the URI in the margin of a letter to a friend.</p>
<p>When someone follows a link and it breaks, they generally lose confidence in the owner of the server. They also are frustrated - emotionally and practically from accomplishing their goal.</p>
<p>Enough people complain all the time about dangling links that I hope the damage is obvious. I hope it also obvious that the reputation damage is to the maintainer of the server whose document vanished.</p>
<h2 id="So-what-should-I-do-Designing-URIs"><a href="#So-what-should-I-do-Designing-URIs" class="headerlink" title="So what should I do? Designing URIs"></a>So what should I do? Designing URIs</h2><p>It is the the duty of a Webmaster to allocate URIs which you will be able to stand by in 2 years, in 20 years, in 200 years. This needs thought, and organization, and commitment.</p>
<p>URIs change when there is some information in them which changes. It is critical how you design them. (What, design a URI? I have to design URIs? Yes, you have to think about it.). Designing mostly means leaving information out.</p>
<p>The creation date of the document - the date the URI is issued - is one thing which will not change. It is very useful for separating requests which use a new system from those which use an old system. That is one thing with which it is good to start a URI. If a document is in any way dated, even though it will be of interest for generations, then the date is a good starter.</p>
<p>The only exception is a page which is deliberately a “latest” page for, for example, the whole organization or a large part of it.</p>
<p><a href="http://www.pathfinder.com/money/moneydaily/latest/" target="_blank" rel="external">http://www.pathfinder.com/money/moneydaily/latest/</a></p>
<p>is the latest “Money daily” column in “Money” magazine. The main reason for not needing the date in this URI is that there is no reason for the persistence of the URI to outlast the magazine. The concept of “today’s Money” vanishes if Money goes out of production. If you want to link to the content, you would link to it where it appears separately in the archives as</p>
<p><a href="http://www.pathfinder.com/money/moneydaily/1998/981212.moneyonline.html" target="_blank" rel="external">http://www.pathfinder.com/money/moneydaily/1998/981212.moneyonline.html</a></p>
<p>(Looks good. Assumes that “money” will mean the same thing throughout the life of pathfinder.com. There is a duplication of “98” and an “.html” you don’t need but otherwise this looks like a strong URI).</p>
<h3 id="What-to-leave-out"><a href="#What-to-leave-out" class="headerlink" title="What to leave out"></a>What to leave out</h3><p>Everything! After the creation date, putting any information in the name is asking for trouble one way or another.</p>
<ul>
<li><strong>Authors name</strong>- authorship can change with new versions. People quit organizations and hand things on.</li>
<li><strong>Subject</strong>. This is tricky. It always looks good at the time but changes surprisingly fast. I discuss this more below.</li>
<li><strong>Status</strong>- directories like “old” and “draft” and so on, not to mention “latest” and “cool” appear all over file systems. Documents change status - or there would be no point in producing drafts. The latest version of a document needs a persistent identifier whatever its status is. Keep the status out of the name.</li>
<li><strong>Access</strong>. At W3C we divide the site into “Team access”, “Member access” and “Public access”. It sounds good, but of course documents start off as team ideas, are discussed with members, and then go public. A shame indeed if every time some document is opened to wider discussion all the old links to it fail! We are switching to a simple date code now.</li>
<li><strong>File name extension</strong>. This is a very common one. “cgi”, even “.html” is something which will change. You may not be using HTML for that page in 20 years time, but you might want today’s links to it to still be valid. The canonical way of making links to the W3C site doesn’t use the extension.(how?)</li>
<li><strong>Software mechanisms</strong>. Look for “cgi”, “exec” and other give-away “look what software we are using” bits in URIs. Anyone want to commit to using perl cgi scripts all their lives? Nope? Cut out the .pl. Read the server manual on how to do it.</li>
<li><strong>Disk name</strong> - gimme a break! But I’ve seen it.</li>
</ul>
<p>So a better example from our site is simply</p>
<p><a href="http://www.w3.org/1998/12/01/chairs" target="_blank" rel="external">http://www.w3.org/1998/12/01/chairs</a></p>
<p>a report of the minutes of a meeting of W3C chair people.</p>
<h4 id="Topics-and-Classification-by-subject"><a href="#Topics-and-Classification-by-subject" class="headerlink" title="Topics and Classification by subject"></a>Topics and Classification by subject</h4><p>I’ll go into this danger in more detail as it is one of the more difficult things to avoid. Typically, topics end up in URIs when you classify your documents according to a breakdown of the work you are doing. That breakdown will change. Names for areas will change. At W3C we wanted to change “MarkUp” to “Markup” and then to “HTML” to reflect the actual content of the section. Also, beware that this is often a flat name space. In 100 years are you sure you won’t want to reuse anything? We wanted to reuse “History” and “Stylesheets” for example in our short life.</p>
<p>This is a tempting way of organizing a web site - and indeed a tempting way of organizing anything, including the whole web. It is a great medium term solution but has serious drawbacks in the long term</p>
<p>Part of the reasons for this lie in the philosophy of meaning. every term in the language it a potential clustering subject, and each person can have a different idea of what it means. Because the relationships between subjects are web-like rather than tree-like, even for people who agree on a web may pick a different tree representation. These are my (oft repeated) general comments on the dangers of hierarchical classification as a general solution.</p>
<p>Effectively, when you use a topic name in a URI you are binding yourself to some classification. You may in the future prefer a different one. Then, the URI will be liable to break.</p>
<p>A reason for using a topic area as part of the URI is that responsibility for sub-parts of a URI space is typically delegated, and then you need a name for the organizational body - the subdivision or group or whatever - which has responsibility for that sub-space. This is binding your URIs to the organizational structure. It is typically safe only when protected by a date further up the URI (to the left of it): 1998/pics can be taken to mean for your server “what we meant in 1998 by pics”, rather than “what in 1998 we did with what we now refer to as pics.”</p>
<h3 id="Don’t-forget-the-domain-name"><a href="#Don’t-forget-the-domain-name" class="headerlink" title="Don’t forget the domain name."></a>Don’t forget the domain name.</h3><p>Remember that this applies not only to the “path” part of a URI but to the server name. If you have separate servers for some of your stuff, remember that that division will be impossible to change without destroying many many links. Some classic “look what software we are using today” domain names are “cgi.pathfinder.com”, “secure”, “lists.w3.org”. They are made to make administration of the servers easier. Whether it represents divisions in your company, or document status, or access level, or security level, be very, very careful before using more than one domain name for more than one type of document. remember that you can hide many web servers inside one apparent web server using redirection and proxying.</p>
<p>Oh, and do think about your domain name. If your name is not soap, will you want to be referred to as “soap.com” even when you have switched your product line to something else. (With apologies to whoever owns soap.com at the moment).</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Keeping URIs so that they will still be around in 2, 20 or 200 or even 2000 years is clearly not as simple as it sounds. However, all over the Web, webmasters are making decisions which will make it really difficult for themselves in the future. Often, this is because they are using tools whose task is seen as to present the best site in the moment, and no one has evaluated what will happen to the links when things change. The message here is, however, that many, many things can change and your URIs can and should stay the same. They only can if you think about how you design them.</p>
<p>See also:</p>
<p><a href="https://www.nngroup.com/articles/url-as-ui/" target="_blank" rel="external">Jacob Nielsen’s “Alertbox” rant on the same topic</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a repost from &lt;a href=&quot;https://www.w3.org/Provider/Style/URI&quot;&gt;here&lt;/a&gt; for my reference. Please go to the original post for the most up-to-date information.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What makes a cool URI?&lt;br&gt;A cool URI is one which does not change.&lt;br&gt;What sorts of URI change?&lt;br&gt;URIs don’t change: people change them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are no reasons at all in theory for people to change URIs (or stop maintaining documents), but millions of reasons in practice.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Network" scheme="http://hackjutsu.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Process 与 Thread</title>
    <link href="http://hackjutsu.com/2016/09/29/Process%20%E4%B8%8E%20Thread/"/>
    <id>http://hackjutsu.com/2016/09/29/Process 与 Thread/</id>
    <published>2016-09-30T01:00:00.000Z</published>
    <updated>2016-09-29T22:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇关于<a href="https://www.amazon.com/Modern-Operating-Systems-Andrew-Tanenbaum/dp/013359162X/" target="_blank" rel="external">Modern Operating System (4th Edition)</a>的读书笔记。它摘录和总结了作者关于Process起源和其与Thread关系的一些思考。</p>
<a id="more"></a>
<h2 id="1-为了整合资源"><a href="#1-为了整合资源" class="headerlink" title="1. 为了整合资源"></a>1. 为了整合资源</h2><p>一开始，CPU只有执行完一份完整的任务代码后才能执行下一份。后来通过把CPU时间分片，人们可以让多个任务看似同时执行起来。</p>
<p>人们为了更好地区分这些“同时”执行的任务以及整合各自资源，提出了process这个概念。</p>
<blockquote>
<p>A process is basically a program in execution… It is fundamentally a container that holds all the information needed to run a program.</p>
</blockquote>
<p>每个process都有独立的:</p>
<ul>
<li><strong>address space</strong>：a list of memory locations from 0 to some maximum, which the process can read and write.</li>
<li><strong>resource</strong>：commonly including registers (including the program counter and stack pointer),  a list of related processes, and all the other information needed to run the program.</li>
</ul>
<p>process和process之间要通过IPC (inter-process communication) 来沟通。</p>
<h2 id="2-为了提高效率"><a href="#2-为了提高效率" class="headerlink" title="2. 为了提高效率"></a>2. 为了提高效率</h2><p>原始的process只有一个thread of control来执行任务。后来人们发现如果一个process中能够有multiple threads of control，并且让它们共享process资源并相互协作，将会大大提高效率。据此，人们提出了thread这个概念。每个thread都拥有自己stack，用来记录执行历史。</p>
<p>如前面提到，为了提高效率，threads之间共享process的address space和resource。由于address space共享，thread A可以几乎毫无障碍地修改thread B stack上的数据。</p>
<ol>
<li>为什么不设置一定的保护呢?</li>
</ol>
<blockquote>
<p>Unlike different processes, which may be from different users and which may be hostile to one another, a process is always owned by a single user, who has presumably created multiple threads so that they can cooperate, not fight.</p>
</blockquote>
<ol>
<li>为什么不用multi-processes来协作呢？</li>
</ol>
<blockquote>
<p>…they are lighter weight than processes, they are easier (i.e., faster) to create and destroy than processes. In many systems, creating a thread goes 10-100 times faster than creating a process.</p>
</blockquote>
<p>而且，process之间的资源共享和信息传递（IPC）不如thread高效（共享address space 和 resource）。</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>Process 这个模型体系由两个独立的概念组成：</p>
<ul>
<li>resource grouping</li>
<li>execution </li>
</ul>
<p>关于resource grouping：</p>
<blockquote>
<p>One way of looking at a process is that it is a way to group related resources together. A process has an address space containing program text and data, as well as other resource. These resources may include open files, child processes, pending alarms, signal handlers, accounting information, and more. By putting them together in the form of a process, they can be managed more easily.</p>
</blockquote>
<p>关于execution：</p>
<blockquote>
<p>The other concept a process has is a thread of control, usually shortened to just thread. The thread has a program counter that keeps track of which instruction to execute next. It has registers, which hold its current working variables. It has a stack, which contains the execution history, with one frame for each procedure called but not yet returned from. </p>
</blockquote>
<p>process 和 thread 虽然联系紧密，但从概念上区分的话，可以这么认为：</p>
<blockquote>
<p>Processes are used to group resources together; threads are the entities scheduled for execution on the CPU.</p>
</blockquote>
<h2 id="4-Acknowledgment"><a href="#4-Acknowledgment" class="headerlink" title="4. Acknowledgment"></a>4. Acknowledgment</h2><p>上文引用皆出自于<a href="https://www.amazon.com/Modern-Operating-Systems-Andrew-Tanenbaum/dp/013359162X/" target="_blank" rel="external">Modern Operating System (4th Edition)</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇关于&lt;a href=&quot;https://www.amazon.com/Modern-Operating-Systems-Andrew-Tanenbaum/dp/013359162X/&quot;&gt;Modern Operating System (4th Edition)&lt;/a&gt;的读书笔记。它摘录和总结了作者关于Process起源和其与Thread关系的一些思考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Operating System" scheme="http://hackjutsu.com/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Network Byte Orders</title>
    <link href="http://hackjutsu.com/2016/08/09/Network%20Byte%20Orders/"/>
    <id>http://hackjutsu.com/2016/08/09/Network Byte Orders/</id>
    <published>2016-08-10T01:00:01.000Z</published>
    <updated>2016-08-10T06:32:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/Y4GHzVH.png" alt=""><br><a id="more"></a></p>
<blockquote>
<p>This a repost of an artical from <strong>tutorials point</strong>. Please checkout <a href="http://www.tutorialspoint.com/unix_sockets/network_byte_orders.htm" target="_blank" rel="external">original post</a> for the most update-to-date information.</p>
</blockquote>
<p>Unfortunately, not all computers store the bytes that comprise a multibyte value in the same order. Consider a 16-bit internet that is made up of 2 bytes. There are two ways to store this value.</p>
<ul>
<li><p><strong>Little Endian</strong> − In this scheme, low-order <strong>byte</strong> is stored on the starting address (A) and high-order byte is stored on the next address (A + 1).</p>
</li>
<li><p><strong>Big Endian</strong> − In this scheme, high-order <strong>byte</strong> is stored on the starting address (A) and low-order byte is stored on the next address (A + 1).</p>
</li>
</ul>
<p>To allow machines with different byte order conventions communicate with each other, the Internet protocols specify a canonical byte order convention for data transmitted over the network. This is known as <strong>Network Byte Order</strong>.</p>
<p>While establishing an Internet socket connection, you must make sure that the data in the <code>sin_port</code> and <code>sin_addr</code> members of the <code>sockaddr_in</code> structure are represented in <strong>Network Byte Order</strong>.</p>
<h2 id="Byte-Ordering-Functions"><a href="#Byte-Ordering-Functions" class="headerlink" title="Byte Ordering Functions"></a>Byte Ordering Functions</h2><p>Routines for converting data between a host’s internal representation and <strong>Network Byte Order</strong> are as follows −</p>
<table>
<thead>
<tr>
<th style="text-align:center">Function</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">htons()</td>
<td style="text-align:center">Host to Network Short</td>
</tr>
<tr>
<td style="text-align:center">htonl()</td>
<td style="text-align:center">Host to Network Long</td>
</tr>
<tr>
<td style="text-align:center">ntohl()</td>
<td style="text-align:center">Network to Host Long</td>
</tr>
<tr>
<td style="text-align:center">ntohs()</td>
<td style="text-align:center">Network to Host Short</td>
</tr>
</tbody>
</table>
<p>Listed below are some more detail about these functions −</p>
<ul>
<li><p><code>unsigned short htons(unsigned short hostshort)</code> − This function converts <strong>16-bit (2-byte)</strong> quantities from host byte order to network byte order.</p>
</li>
<li><p><code>unsigned long htonl(unsigned long hostlong)</code> − This function converts <strong>32-bit (4-byte)</strong> quantities from host byte order to network byte order.</p>
</li>
<li><p><code>unsigned short ntohs(unsigned short netshort)</code>  − This function converts <strong>16-bit (2-byte)</strong> quantities from network byte order to host byte order.</p>
</li>
<li><p><code>unsigned long ntohl(unsigned long netlong)</code> − This function converts <strong>32-bit</strong> quantities from network byte order to host byte order.</p>
</li>
</ul>
<p>These functions are macros and result in the insertion of conversion source code into the calling program. On little-endian machines, the code will change the values around to network byte order. On big-endian machines, no code is inserted since none is needed; the functions are defined as null.</p>
<h2 id="Program-to-Determine-Host-Byte-Order"><a href="#Program-to-Determine-Host-Byte-Order" class="headerlink" title="Program to Determine Host Byte Order"></a>Program to Determine Host Byte Order</h2><p>Keep the following code in a file byteorder.c and then compile it and run it over your machine.</p>
<p>In this example, we store the two-byte value 0x0102 in the short integer and then look at the two consecutive bytes, c[0] (the address A) and c[1] (the address A + 1) to determine the byte order.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="keyword">union</span> &#123;</div><div class="line">      <span class="keyword">short</span> s;</div><div class="line">      <span class="keyword">char</span> c[<span class="keyword">sizeof</span>(<span class="keyword">short</span>)];</div><div class="line">   &#125;un;</div><div class="line"></div><div class="line">   un.s = <span class="number">0x0102</span>;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">sizeof</span>(<span class="keyword">short</span>) == <span class="number">2</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (un.c[<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; un.c[<span class="number">1</span>] == <span class="number">2</span>)</div><div class="line">         <span class="built_in">printf</span>(<span class="string">"big-endian\n"</span>);</div><div class="line"></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (un.c[<span class="number">0</span>] == <span class="number">2</span> &amp;&amp; un.c[<span class="number">1</span>] == <span class="number">1</span>)</div><div class="line">         <span class="built_in">printf</span>(<span class="string">"little-endian\n"</span>);</div><div class="line"></div><div class="line">      <span class="keyword">else</span></div><div class="line">         <span class="built_in">printf</span>(<span class="string">"unknown\n"</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"sizeof(short) = %d\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">short</span>));</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>An output generated by this program on a Pentium machine is as follows −<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$&gt; gcc byteorder.c</div><div class="line">$&gt; ./a.out</div><div class="line">little-endian</div><div class="line">$&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p><a href="http://www.tutorialspoint.com/unix_sockets/network_byte_orders.htm" target="_blank" rel="external">original post</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Y4GHzVH.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Network" scheme="http://hackjutsu.com/tags/Network/"/>
    
      <category term="C++" scheme="http://hackjutsu.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Difference between set, export and env in bash</title>
    <link href="http://hackjutsu.com/2016/08/04/Difference%20between%20set,%20export%20and%20env%20in%20bash/"/>
    <id>http://hackjutsu.com/2016/08/04/Difference between set, export and env in bash/</id>
    <published>2016-08-05T01:00:01.000Z</published>
    <updated>2016-08-04T19:29:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>What’s the difference between <code>set</code>, <code>export</code> and <code>env</code> and when should we use each?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">key=value</div><div class="line">env key=value</div><div class="line"><span class="built_in">export</span> key=value</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<blockquote>
<p>This is a <a href="http://askubuntu.com/questions/205688/whats-the-difference-between-set-export-and-env-and-when-should-i-use-each" target="_blank" rel="external">repost</a> from StackExchange ask Ubuntu community.</p>
</blockquote>
<hr>
<h2 id="Setting-Variables"><a href="#Setting-Variables" class="headerlink" title="Setting Variables"></a>Setting Variables</h2><p>Let us consider a specific example. The <code>grep</code> command uses an environment variable called <code>GREP_OPTIONS</code> to set default options. </p>
<p>Now. Given that the file <code>test.txt</code> contains the following lines:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">line one</div><div class="line">line two</div></pre></td></tr></table></figure></p>
<p>running the command <code>grep one test.txt</code> will return<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">line one</div></pre></td></tr></table></figure></p>
<p>If you run grep with the <code>-v</code> option, it will return the non-matching lines, so the output will be<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">line two</div></pre></td></tr></table></figure></p>
<p><strong>We will now try to set the option with an environmental variable.</strong></p>
<p>Environment variables set without <code>export</code> will not be inherited in the environment of the commands you are calling.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GREP_OPTIONS=<span class="string">'-v'</span></div><div class="line">grep one test.txt</div></pre></td></tr></table></figure></p>
<p> The result:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">line one</div></pre></td></tr></table></figure></p>
<p> Obviously, the option <code>-v</code> did not get passed to <code>grep</code>. </p>
<blockquote>
<p>You want to use this form when you are setting a variable only for the shell to use, for example in <code>for i in * ; do</code> you do not want to export <code>$i</code>.</p>
</blockquote>
<p>However, the variable is passed on to the environment of that particular command line, so you can do<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GREP_OPTIONS=<span class="string">'-v'</span> grep one test.txt</div></pre></td></tr></table></figure></p>
<p> which will return the expected<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">line two</div></pre></td></tr></table></figure></p>
<p> <em>You use this form for temporarily change the environment of this particular instance of the program launched.</em></p>
<h2 id="Exporting-variables"><a href="#Exporting-variables" class="headerlink" title="Exporting variables"></a>Exporting variables</h2><p>Exporting a variable causes the variable to be inherited:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GREP_OPTIONS=<span class="string">'-v'</span></div><div class="line">grep one test.txt</div></pre></td></tr></table></figure></p>
<p> returns now<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">line two</div></pre></td></tr></table></figure></p>
<blockquote>
<p>This is the most common way of setting variables for use of subsequently started processes in a shell</p>
</blockquote>
<h2 id="Env"><a href="#Env" class="headerlink" title="Env"></a>Env</h2><p>This was all done in bash. <code>export</code> is a bash builtin; <code>VAR=whatever</code> is bash syntax. <code>env</code>, on another hand, is a program in itself. When <code>env</code> is called, following things happen:</p>
<pre><code>1. The command `env` gets executed as a new process
2. `env` modifies the environment, and
3. calls the command that was provided as an argument. The `env` process is replaced by the `command` process.
</code></pre><p> Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">env GREP_OPTIONS=<span class="string">'-v'</span> grep one test.txt</div></pre></td></tr></table></figure></p>
<p>This command will launch two new processes: (i) env and (ii) grep (actually, the second process will replace the first one). From the point of view of the <code>grep</code> process, the result is <em>exactly</em> the same as running<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GREP_OPTIONS=&apos;-v&apos; grep one test.txt</div></pre></td></tr></table></figure></p>
<p> However, you can use this idiom if you are outside of bash or don’t want to launch another shell (for example, when you are using the <code>exec()</code> family of functions rather than the <code>system()</code> call).</p>
<h3 id="Additional-note-on-usr-bin-env"><a href="#Additional-note-on-usr-bin-env" class="headerlink" title="Additional note on #!/usr/bin/env"></a>Additional note on #!/usr/bin/env</h3><p>This is also why the idiom <code>#!/usr/bin/env interpreter</code> is used rather than <code>#!/usr/bin/interpreter</code>. <code>env</code> does not require a full path to a program, because it uses the <code>execvp()</code> function which searches through the <code>PATH</code> variable just like a shell does, and then <em>replaces</em>  itself by the command run. Thus, it can be used to find out where an interpreter (like perl or python) “sits” on the path. </p>
<p>It also means that by modifying the current path you can influence which python variant will be called. This makes the following possible:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">'#!/usr/bin/bash\n\necho I am an evil interpreter!'</span> &gt; python</div><div class="line">chmod a+x ./python</div><div class="line"><span class="built_in">export</span> PATH=.</div><div class="line">calibre</div></pre></td></tr></table></figure></p>
<p>instead of launching Calibre, will result in</p>
<pre><code class="plain">I am an evil interpreter!
</code></pre>
<hr>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p><a href="http://askubuntu.com/questions/205688/whats-the-difference-between-set-export-and-env-and-when-should-i-use-each" target="_blank" rel="external">Original Post</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What’s the difference between &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt; and &lt;code&gt;env&lt;/code&gt; and when should we use each?&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;key=value&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;env key=value&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; key=value&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Command Lines" scheme="http://hackjutsu.com/categories/Command-Lines/"/>
    
    
      <category term="CommandLine" scheme="http://hackjutsu.com/tags/CommandLine/"/>
    
      <category term="bash" scheme="http://hackjutsu.com/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>Load Average on Unix-like Systems</title>
    <link href="http://hackjutsu.com/2016/06/21/Load%20Average%20on%20Unix-like%20Systems/"/>
    <id>http://hackjutsu.com/2016/06/21/Load Average on Unix-like Systems/</id>
    <published>2016-06-22T01:00:01.000Z</published>
    <updated>2016-06-22T00:34:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/ydCQUFz.png" style="max-width: 550px;"></p>
<p>Linux, Mac, and other <a href="http://www.howtogeek.com/182649/htg-explains-what-is-unix/" target="_blank" rel="external">Unix-like</a> systems display “load average” numbers. These numbers tell you how busy your system’s CPU, disk, and other resources are. They’re not self-explanatory at first, but it’s easy to become familiar with them.<br><a id="more"></a><br>Whether you’re using a Linux desktop or server, a Linux-based router firmware, a NAS system based on Linux or BSD, or even Mac OS X, you’ve probably seen a “load average” measurement somewhere.</p>
<blockquote>
<p>This post is adapted from the <a href="http://www.howtogeek.com/194642/understanding-the-load-average-on-linux-and-other-unix-like-systems/" target="_blank" rel="external">original article</a> on <a href="www.howtogeek.com">www.howtogeek.com</a> for study purpose. Please refer to the original post for the most up-to-date information.</p>
</blockquote>
<h2 id="Load-vs-Load-Average"><a href="#Load-vs-Load-Average" class="headerlink" title="Load vs Load Average"></a>Load vs Load Average</h2><p>On Unix-like systems, including Linux, the system load is a measurement of the computational work the system is performing. This measurement is displayed as a number. A completely idle computer has a load average of 0. <strong>Each running process either using or waiting for CPU resources adds 1 to the load average.</strong> So, if your system has a load of 5, five processes are either using or waiting for the CPU.</p>
<p>Unix systems traditionally just counted processes waiting for the CPU, but Linux also counts processes waiting for other resources — for example, processes waiting to read from or write to the disk.</p>
<p>On its own, the load number doesn’t mean too much. A computer might have a load of 0 one split-second, and a load of 5 the next split-second as several processes use the CPU. Even if you could see the load at any given time, that number would be basically meaningless.</p>
<p>That’s why Unix-like systems don’t display the current load. They display the <strong>load average</strong> — an average of the computer’s load over several periods of time. This allows you to see how much work your computer has been performing.</p>
<h2 id="Finding-the-Load-Average"><a href="#Finding-the-Load-Average" class="headerlink" title="Finding the Load Average"></a>Finding the Load Average</h2><p>The load average is shown in many different graphical and terminal utilities, including in the top command and in the graphical GNOME System Monitor tool. However, the easiest, most standardized way to see your load average is to run the <code>uptime</code> command in a terminal. This command shows your computer’s load average as well as how long it’s been powered on.</p>
<p>The <code>uptime</code> command works on Linux, Mac OS X, and other Unix-like systems.</p>
<p><img src="http://www.howtogeek.com/wp-content/uploads/2014/08/650x219xtop-command-load-average-on-linux.png.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.LyZvGdrp9p.png" alt=""></p>
<h2 id="Understanding-the-Load-Average"><a href="#Understanding-the-Load-Average" class="headerlink" title="Understanding the Load Average"></a>Understanding the Load Average</h2><p>The first time you see a load average, the numbers look fairly meaningless. Here’s an example load average readout:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">load average: 1.05, 0.70, 5.09</div></pre></td></tr></table></figure></p>
<p>From left to right, these numbers show you the average load over the last one minute, the last five minutes, and the last fifteen minutes. In other words, the above output means:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">load average over the last 1 minute: 1.05</div><div class="line"></div><div class="line">load average over the last 5 minutes: 0.70</div><div class="line"></div><div class="line">load average over the last 15 minutes: 5.09</div></pre></td></tr></table></figure></p>
<p>The time periods are omitted to save space. Once you’re familiar with the time periods, you can quickly glance at the load average numbers and understand what they mean.</p>
<h2 id="What-do-the-numbers-mean-exactly"><a href="#What-do-the-numbers-mean-exactly" class="headerlink" title="What do the numbers mean exactly?"></a>What do the numbers mean exactly?</h2><p>Let’s use the above numbers to understand what the load average actually means. Assuming you’re using a single-CPU system, the numbers tell us that:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">over the last 1 minute: The computer was overloaded by 5% on average. On average, .05 processes were waiting for the CPU. (1.05)</div><div class="line"></div><div class="line">over the last 5 minutes: The CPU idled for 30% of the time. (0.70)</div><div class="line"></div><div class="line">over the last 15 minutes: The computer was overloaded by 409% on average. On average, 4.09 processes were waiting for the CPU. (5.09)</div></pre></td></tr></table></figure></p>
<p>You probably have a system with multiple CPUs or a multi-core CPU. The load average numbers work a bit differently on such a system. For example, if you have a load average of 2 on a single-CPU system, this means your system was overloaded by 100 percent — the entire period of time, one process was using the CPU while one other process was waiting. On a system with two CPUs, this would be complete usage — two different processes were using two different CPUs the entire time. On a system with four CPUs, this would be half usage — two processes were using two CPUs, while two CPUs were sitting idle.</p>
<p>To understand the load average number, you need to know how many CPUs your system has. A load average of 6.03 would indicate a system with a single CPU was massively overloaded, but it would be fine on a computer with 8 CPUs.</p>
<p>The load average is especially useful on servers and embedded systems. You can glance at it to understand how your system is performing. If it’s overloaded, you may need to deal with a process that’s wasting resources, provide more hardware resources, or move some of the workload to another system.</p>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p><a href="http://www.howtogeek.com/194642/understanding-the-load-average-on-linux-and-other-unix-like-systems/" target="_blank" rel="external">Understanding the Load Average on Linux and Other Unix-like Systems</a></p>
<p>@(Learning Cards)[Linux]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ydCQUFz.png&quot; style=&quot;max-width: 550px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Linux, Mac, and other &lt;a href=&quot;http://www.howtogeek.com/182649/htg-explains-what-is-unix/&quot;&gt;Unix-like&lt;/a&gt; systems display “load average” numbers. These numbers tell you how busy your system’s CPU, disk, and other resources are. They’re not self-explanatory at first, but it’s easy to become familiar with them.&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://hackjutsu.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Virtual Memory Management</title>
    <link href="http://hackjutsu.com/2016/06/20/Linux%20Virtual%20Memory%20Management/"/>
    <id>http://hackjutsu.com/2016/06/20/Linux Virtual Memory Management/</id>
    <published>2016-06-21T01:00:00.000Z</published>
    <updated>2016-06-21T21:41:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.serverpoint.com/images-en/index-vps-linux.png" style="max-width: 550px;"><br>This post is about techniques to manage a Linux system’s virtual memory. The first section discusses commands to check the system’s space usage. The second section shows techniques to use swap files to increase system’s virtaul memory.</p>
<a id="more"></a>
<h2 id="Checking-Space-Usage"><a href="#Checking-Space-Usage" class="headerlink" title="Checking Space Usage"></a>Checking Space Usage</h2><h3 id="Using-free-Command"><a href="#Using-free-Command" class="headerlink" title="Using free Command"></a>Using <code>free</code> Command</h3><p>The free command is used to display the amount of free and used system memory. Using the free command with -h option, which displays output in a human readable format.<br><img src="http://i.imgur.com/CNhZMDZ.png" alt=""></p>
<p>From the output above, you can see that the last line provides information about the system swap space. More usage of <code>free</code> command can be found at:  <a href="http://www.tecmint.com/check-memory-usage-in-linux/" target="_blank" rel="external">10 free Commands to Check Memory Usage in Linux</a>.</p>
<h3 id="Using-atop-Command"><a href="#Using-atop-Command" class="headerlink" title="Using atop Command"></a>Using <code>atop</code> Command</h3><p>The <code>atop</code> command is a system monitor that reports about activities of various processes. But importantly it also shows information about free and used memory space.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">atop</div></pre></td></tr></table></figure></p>
<p><img src="http://i.imgur.com/lJWIqIi.png" alt=""></p>
<h3 id="Using-df-Command"><a href="#Using-df-Command" class="headerlink" title="Using df Command"></a>Using <code>df</code> Command</h3><p>This command helps to  report file system disk space usage.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df -h</div></pre></td></tr></table></figure></p>
<p><img src="http://i.imgur.com/OuwGNQ6.png" alt=""></p>
<h3 id="Using-swap-Command"><a href="#Using-swap-Command" class="headerlink" title="Using swap Command"></a>Using <code>swap</code> Command</h3><p>This command helps you to specify the devices on which paging and swapping will be done and we shall look at few important options.</p>
<p>To view all devices marked as swap in the <code>/etc/fstab</code> file you can use the <code>--all</code> option. Though devices that are already working as swap space are skipped.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">swapon --all</div></pre></td></tr></table></figure></p>
<p>If you want to view a summary of swap space usage by device, use the <code>--summary</code> option as follows.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">swapon --summary</div></pre></td></tr></table></figure></p>
<h2 id="How-To-Add-Swap-Files-on-Ubuntu-14-04"><a href="#How-To-Add-Swap-Files-on-Ubuntu-14-04" class="headerlink" title="How To Add Swap Files on Ubuntu 14.04"></a>How To Add Swap Files on Ubuntu 14.04</h2><p><strong>Original post :</strong> <a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04" target="_blank" rel="external">How To Add Swap on Ubuntu 14.04</a></p>
<p>One of the easiest way of increasing the responsiveness of your server and guarding against out of memory errors in your applications is to add some swap space. Swap is an area on a hard drive that has been designated as a place where the operating system can temporarily store data that it can no longer hold in RAM.</p>
<h3 id="Create-a-Swap-File"><a href="#Create-a-Swap-File" class="headerlink" title="Create a Swap File"></a>Create a Swap File</h3><p>One quick way of getting the same file is by using the <code>fallocate</code> program. This command creates a file of a preallocated size instantly, without actually having to write dummy contents.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo fallocate <span class="_">-l</span> 4G /swapfile</div></pre></td></tr></table></figure></p>
<p>The prompt will be returned to you almost immediately. We can verify that the correct amount of space was reserved by typing:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -lh /swapfile</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw-r--r-- 1 root root 4.0G Apr 28 17:19 /swapfile</div></pre></td></tr></table></figure>
<p>As you can see, our file is created with the correct amount of space set aside.</p>
<h3 id="Enabling-the-Swap-File"><a href="#Enabling-the-Swap-File" class="headerlink" title="Enabling the Swap File"></a>Enabling the Swap File</h3><p>Right now, our file is created, but our system does not know that this is supposed to be used for swap. We need to tell our system to format this file as swap and then enable it.</p>
<p>Before we do that though, we need to adjust the permissions on our file so that it isn’t readable by anyone besides root. Allowing other users to read or write to this file would be a huge security risk. We can lock down the permissions by typing:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 600 /swapfile</div></pre></td></tr></table></figure></p>
<p>Verify that the file has the correct permissions by typing:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -lh /swapfile</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw------- 1 root root 4.0G Apr 28 17:19 /swapfile</div></pre></td></tr></table></figure>
<p>As you can see, only the columns for the root user have the read and write flags enabled.</p>
<p>Now that our file is more secure, we can tell our system to set up the swap space by typing:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkswap /swapfile</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Setting up swapspace version 1, size = 4194300 KiB</div><div class="line">no label, UUID=e2f1e9cf-c0a9-4ed4-b8ab-714b8a7d6944</div></pre></td></tr></table></figure>
<p>Our file is now ready to be used as a swap space. We can enable this by typing:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo swapon /swapfile</div></pre></td></tr></table></figure></p>
<p>We can verify that the procedure was successful by checking whether our system reports swap space now:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo swapon <span class="_">-s</span></div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Filename                Type        Size    Used    Priority</div><div class="line">/swapfile               file        4194300 0       -1</div></pre></td></tr></table></figure>
<p>We have a new swap file here. We can use the free utility again to corroborate our findings:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">free -m</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">             total       used       free     shared    buffers     cached</div><div class="line">Mem:          3953        101       3851          0          5         30</div><div class="line">-/+ buffers/cache:         66       3887</div><div class="line">Swap:         4095          0       4095</div></pre></td></tr></table></figure>
<p>Our swap has been set up successfully and our operating system will begin to use it as necessary.</p>
<h3 id="Make-the-Swap-File-Permanent"><a href="#Make-the-Swap-File-Permanent" class="headerlink" title="Make the Swap File Permanent"></a>Make the Swap File Permanent</h3><p>We have our swap file enabled, but when we reboot, the server will not automatically enable the file. We can change that though by modifying the <code>/etc/fstab</code> file.</p>
<p>Edit the file with root privileges in your text editor.  At the bottom of the file, you need to add a line that will tell the operating system to automatically use the file you created:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/swapfile   none    swap    sw    0   0</div></pre></td></tr></table></figure></p>
<p>Save and close the file when you are finished.</p>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p><a href="http://www.wikihow.com/Check-Swap-Space-in-Linux" target="_blank" rel="external">Check Swap Space in Linux</a><br><a href="https://www.digitalocean.com/community/questions/how-to-change-swap-size-on-ubuntu-14-04" target="_blank" rel="external">How to Change Swap Size on Ubuntu 14-04</a><br><a href="http://www.cyberciti.biz/faq/linux-check-swap-usage-command/" target="_blank" rel="external">Linux Check Swap Usage Command</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.serverpoint.com/images-en/index-vps-linux.png&quot; style=&quot;max-width: 550px;&quot;/&gt;&lt;br&gt;This post is about techniques to manage a Linux system’s virtual memory. The first section discusses commands to check the system’s space usage. The second section shows techniques to use swap files to increase system’s virtaul memory.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://hackjutsu.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>BitTiger Geeks Ranking</title>
    <link href="http://hackjutsu.com/2016/05/24/BitTiger%20Geeks%20Ranking/"/>
    <id>http://hackjutsu.com/2016/05/24/BitTiger Geeks Ranking/</id>
    <published>2016-05-25T01:00:01.000Z</published>
    <updated>2016-08-04T19:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/uU3V2MT.png" style="max-height: 350px;"></p>
<p><strong>BitTiger Geeks Ranking</strong> (太阁极客榜) is a real-time ranking board for BitTiger’s Github members. Its results are based on members’ Github activities in the past seven days with daily updates at <strong>06:30 PDT</strong>.</p>
<blockquote>
<p><strong>Note:</strong> This post is my summary for those front end knowledge applied in this project.</p>
</blockquote>
<ul>
<li><a href="https://bittiger-ranking.firebaseapp.com/" target="_blank" rel="external">Demo Link</a></li>
<li><a href="https://github.com/hackjustu/Github-Ranking-FrontEnd" target="_blank" rel="external">GitHub Link</a></li>
</ul>
<a id="more"></a>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><strong>HTML Forms</strong><br>HTML Forms are used to collect user inputs.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;form&gt;</div><div class="line">... form elements ...</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>The <code>&lt;input&gt;</code> element is the most important form element. Form elements are different types of input elements, checkboxes, radio buttons, submit buttons, and more.</p>
<blockquote>
<p>Check out this link for more information about <a href="http://www.w3schools.com/html/html_forms.asp" target="_blank" rel="external">HTML Forms</a>.</p>
</blockquote>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>CSS (Cascading Style Sheets) is a stylesheet language that describes the presentation of an HTML document.</p>
<h3 id="Cascading-Order"><a href="#Cascading-Order" class="headerlink" title="Cascading Order"></a>Cascading Order</h3><ol>
<li>Inline style (inside an HTML element)</li>
<li>External and internal style sheets (in the head section)</li>
<li>Browser default <strong>strong text</strong></li>
</ol>
<h3 id="Margins-and-Padding"><a href="#Margins-and-Padding" class="headerlink" title="Margins and Padding"></a>Margins and Padding</h3><p>The CSS <code>margin</code> properties are used to generate space around elements. The margin properties set the size of the white space <strong>OUTSIDE</strong> the border.</p>
<p>The CSS <code>padding</code> properties are used to generate space around content. The padding properties set the size of the white space <strong>BETWEEN</strong> the element content and the element border.</p>
<h3 id="Height-Width"><a href="#Height-Width" class="headerlink" title="Height/Width"></a>Height/Width</h3><p>The <code>height</code> and <code>width</code> properties do <strong>NOT</strong> include padding, borders, or margins; they set the height/width of the area inside the padding, border, and margin of the element!</p>
<p>Besides height/width, there are also max-height/min-height/max-width/min-width.</p>
<blockquote>
<p>Check out this <a href="http://www.w3schools.com/css/css_dimension.asp" target="_blank" rel="external">link</a> for mare information.</p>
</blockquote>
<h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><p>The <code>display</code> property specifies if/how an element is displayed.</p>
<p>Every HTML element has a default display value depending on what type of element it is. The default display value for most elements is block or inline.</p>
<p>A <code>block</code> element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).</p>
<p>An <code>inline</code> element does not start on a new line and only takes up as much width as necessary.</p>
<p>An <code>inline-block</code> element is a combination between <code>block</code> and <code>inline</code>.</p>
<blockquote>
<p>Check out this <a href="http://stackoverflow.com/questions/8969381/what-is-the-difference-between-display-inline-and-display-inline-block" target="_blank" rel="external">StackOverflow post</a> for more about their difference.</p>
</blockquote>
<h3 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h3><p>The position property specifies the type of positioning method used for an element.<br>There are four different position values:</p>
<ul>
<li>static</li>
<li>relative</li>
<li>fixed</li>
<li>absolute</li>
</ul>
<blockquote>
<p>Check out this <a href="http://www.w3schools.com/css/css_positioning.asp" target="_blank" rel="external">post</a> to see their difference.</p>
</blockquote>
<h3 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h3><p>The <code>float</code> property specifies whether or not an element should float.<br>The <code>clear</code> property is used to control the behavior of floating elements.</p>
<blockquote>
<p>Check out this <a href="http://www.w3schools.com/css/css_float.asp" target="_blank" rel="external">post</a> to see their difference.</p>
</blockquote>
<h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><h4 id="Text-Color"><a href="#Text-Color" class="headerlink" title="Text Color"></a>Text Color</h4><p>The <code>color</code> property is used to set the color of the text.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#p1 &#123;color: #ff0000;&#125;   /* red */</div><div class="line">#p2 &#123;color: rgb(0, 255, 0);&#125;   /* green */</div><div class="line">#p3 &#123;color: rgba(0, 0, 255, 0.3);&#125;   /* blue with opacity */</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Check out this <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_blank" rel="external">post</a> for more about the CSS color options.</p>
</blockquote>
<h4 id="Text-Alignment"><a href="#Text-Alignment" class="headerlink" title="Text Alignment"></a>Text Alignment</h4><p>The <code>text-align</code> property is used to set the horizontal alignment of a text.</p>
<ul>
<li>left</li>
<li>right</li>
<li>center</li>
<li>justify</li>
</ul>
<h4 id="Text-Decoration"><a href="#Text-Decoration" class="headerlink" title="Text Decoration"></a>Text Decoration</h4><p>The <code>text-decoration</code> property is used to set or remove decorations from text. The value <code>text-decoration: none;</code> is often used to remove underlines from links.</p>
<ul>
<li>none</li>
<li>overline</li>
<li>line-through</li>
<li>underline</li>
</ul>
<h4 id="Text-Transformation"><a href="#Text-Transformation" class="headerlink" title="Text Transformation"></a>Text Transformation</h4><p>The <code>text-transform</code> property is used to specify uppercase and lowercase letters in a text.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">p.uppercase &#123;</div><div class="line">    text-transform: uppercase;</div><div class="line">&#125;</div><div class="line"></div><div class="line">p.lowercase &#123;</div><div class="line">    text-transform: lowercase;</div><div class="line">&#125;</div><div class="line"></div><div class="line">p.capitalize &#123;</div><div class="line">    text-transform: capitalize;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="More"><a href="#More" class="headerlink" title="More"></a>More</h4><p><code>text-indent</code><br><code>letter-spacing</code><br><code>line-height</code><br><code>direction</code><br><code>word-spacing</code></p>
<blockquote>
<p>Check out this <a href="http://www.w3schools.com/css/css_text.asp" target="_blank" rel="external">post</a> for more details.</p>
</blockquote>
<h3 id="Combinators"><a href="#Combinators" class="headerlink" title="Combinators"></a>Combinators</h3><p>There are four different combinators in CSS3:</p>
<ul>
<li>descendant selector (space)</li>
<li>child selector (&gt;)</li>
<li>adjacent sibling selector (+)</li>
<li>general sibling selector (~)</li>
</ul>
<blockquote>
<p>Check out this <a href="http://www.w3schools.com/css/css_combinators.asp" target="_blank" rel="external">post</a> to see their difference.</p>
</blockquote>
<h3 id="Pseudo-class"><a href="#Pseudo-class" class="headerlink" title="Pseudo-class"></a>Pseudo-class</h3><p>A pseudo-class is used to define a special state of an element. For example, it can be used to:</p>
<ul>
<li>Style an element when a user mouses over it</li>
<li>Style visited and unvisited links differently</li>
<li>Style an element when it gets focus</li>
</ul>
<blockquote>
<p>Check out this <a href="http://www.w3schools.com/css/css_pseudo_classes.asp" target="_blank" rel="external">post</a> to see their difference.</p>
</blockquote>
<h3 id="Pseudo-element"><a href="#Pseudo-element" class="headerlink" title="Pseudo-element"></a>Pseudo-element</h3><p>A CSS pseudo-element is used to style specified parts of an element. For example, it can be used to:</p>
<ul>
<li>Style the first letter, or line, of an element</li>
<li>Insert content before, or after, the content of an element</li>
</ul>
<blockquote>
<p>Check out this <a href="http://www.w3schools.com/css/css_pseudo_elements.asp" target="_blank" rel="external">post</a> to see their difference.</p>
</blockquote>
<h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><p>CSS3 is the latest standard for CSS. It is completely backwards-compatible with earlier versions of CSS.</p>
<blockquote>
<p>Check out this <a href="http://code.tutsplus.com/tutorials/10-css3-properties-you-need-to-be-familiar-with--net-16417" target="_blank" rel="external">post</a> for the some popular CSS3 properties.</p>
</blockquote>
<h3 id="Rounded-Corners"><a href="#Rounded-Corners" class="headerlink" title="Rounded Corners"></a>Rounded Corners</h3><p>With the CSS3 <code>border-radius</code> property, we can give any element “rounded corners”.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">border-radius: 25px;</div><div class="line">border-radius: 50%;</div></pre></td></tr></table></figure></p>
<h3 id="Box-Sizing"><a href="#Box-Sizing" class="headerlink" title="Box Sizing"></a>Box Sizing</h3><p>The CSS3 <code>box-sizing</code> property allows us to include the padding and border in an element’s total width and height.</p>
<p><strong>Without the CSS3 box-sizing Property</strong><br>width + padding + border = actual width of an element<br>height + padding + border = actual height of an element</p>
<p><strong>With the CSS3 box-sizing Property</strong><br>Padding and border are included in an element’s total width and height.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.div1 &#123;</div><div class="line">    width: 300px;</div><div class="line">    height: 100px;</div><div class="line">    border: 1px solid blue;</div><div class="line">    box-sizing: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Since the result of using the <code>box-sizing: border-box;</code> is so much better, many developers want all elements on their pages to work this way.</p>
<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><h3 id="Grid-Basics"><a href="#Grid-Basics" class="headerlink" title="Grid Basics"></a>Grid Basics</h3><p>The Bootstrap grid system has four classes:</p>
<ul>
<li>xs (for phones)</li>
<li>sm (for tablets)</li>
<li>md (for desktops)</li>
<li>lg (for larger desktops)</li>
</ul>
<p>The classes above can be combined to create more dynamic and flexible layouts.</p>
<p>The following is a basic structure of a Bootstrap grid;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;row&quot;&gt;</div><div class="line">  &lt;div class=&quot;col-*-*&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;row&quot;&gt;</div><div class="line">  &lt;div class=&quot;col-*-*&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;col-*-*&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;col-*-*&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;row&quot;&gt;</div><div class="line">  ...</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Check out this <a href="http://www.w3schools.com/bootstrap/bootstrap_grid_basic.asp" target="_blank" rel="external">post</a> for more information about Bootstrap grid system.</p>
</blockquote>
<h2 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h2><blockquote>
<p>Check out these two Udemy courses to go over AnguarJS.</p>
<ul>
<li><a href="https://www.udemy.com/learn-angularjs/learn/v4/content" target="_blank" rel="external">Learn and Understand AngularJS</a></li>
<li><a href="https://www.udemy.com/maruti-angularjs/learn/v4/content" target="_blank" rel="external">Learn AngularJS Step By Step</a></li>
</ul>
</blockquote>
<p>We can get more details about AngularJS in its <a href="https://docs.angularjs.org/guide" target="_blank" rel="external">official website</a>.</p>
<h3 id="Angular-Directives"><a href="#Angular-Directives" class="headerlink" title="Angular Directives"></a>Angular Directives</h3><p>We have used the following AnguarJS Directives in our project.</p>
<p><code>ng-app</code><br><code>ng-controller</code></p>
<p><code>ng-repeat</code><br><code>ng-if</code><br><code>ng-show/hide</code><br><code>ng-click</code><br><code>ng-model</code><br><code>ng-include</code><br><code>ng-class</code><br><code>ng-cloak</code><br><code>ng-src</code><br><code>ng-href</code></p>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Singleton + Dependency Injection</p>
<h4 id="AngularJS-Services"><a href="#AngularJS-Services" class="headerlink" title="AngularJS Services"></a>AngularJS Services</h4><p><code>$scope</code><br><code>$filter</code><br><code>$timeout</code></p>
<h4 id="Customb-Services"><a href="#Customb-Services" class="headerlink" title="Customb Services"></a>Customb Services</h4><p>I haven’t tried it yet.</p>
<h2 id="npm-and-bower"><a href="#npm-and-bower" class="headerlink" title="npm and bower"></a>npm and bower</h2><p>Dependency management tools, like maven or gradle for Java.  I personally consider it inconvenient to use two tools to manage a project. Probably npm might replace bower’s role in the front end side.</p>
<ul>
<li><a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a></li>
<li><a href="http://bower.io/" target="_blank" rel="external">bower</a></li>
</ul>
<h2 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h2><p><strong><a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a></strong> is a automation tasks runner tool for front end projects. It is something like <strong>Ant</strong> for Java.</p>
<p>There are three steps to configure the <code>Gruntfile.js</code>.</p>
<ul>
<li>Configure the Grunt tasks</li>
<li>Load the Grunt tasks</li>
<li>Register the Grunt tasks</li>
</ul>
<p>Here is a list of Grunt tasks used in our project.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-clean'</span>);</div><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-copy'</span>);</div><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</div><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-jshint'</span>);</div><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-csslint'</span>);</div><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-cssmin'</span>);</div><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-usemin'</span>);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>The best way to go over <strong>Grunt</strong> is to go over this <a href="https://www.udemy.com/learn-grunt-automate-your-front-end-workflow/" target="_blank" rel="external">Udemy course</a> again.</p>
</blockquote>
<h2 id="前端项目工程化"><a href="#前端项目工程化" class="headerlink" title="前端项目工程化"></a>前端项目工程化</h2><p><a href="https://github.com/fouber/blog/issues/10" target="_blank" rel="external">前段工程–基础篇</a></p>
<ul>
<li>第一阶段：库/框架选型<ul>
<li>AngularJS、React、Bootstrap…</li>
</ul>
</li>
<li>第二阶段：简单构建优化<ul>
<li>Grunt or Gulp</li>
</ul>
</li>
<li>第三阶段：JS/CSS模块化开发<ul>
<li>分而治之</li>
</ul>
</li>
<li>第四阶段：更多的工程问题<ul>
<li>项目大体量、团队大规模、高性能</li>
<li>组件化开发 （header footer jumbotron ranking-table）</li>
<li>“智能”静态资源管理</li>
</ul>
</li>
</ul>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><ul>
<li><a href="http://www.w3schools.com/" target="_blank" rel="external">w3schools</a></li>
<li><a href="https://www.udemy.com/courses/" target="_blank" rel="external">Udemy</a></li>
<li><a href="https://angularjs.org/" target="_blank" rel="external">AngularJS</a></li>
<li><a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a></li>
<li><a href="https://github.com/fouber/blog" target="_blank" rel="external">fouber’s GitHub blog</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/uU3V2MT.png&quot; style=&quot;max-height: 350px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BitTiger Geeks Ranking&lt;/strong&gt; (太阁极客榜) is a real-time ranking board for BitTiger’s Github members. Its results are based on members’ Github activities in the past seven days with daily updates at &lt;strong&gt;06:30 PDT&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This post is my summary for those front end knowledge applied in this project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bittiger-ranking.firebaseapp.com/&quot;&gt;Demo Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hackjustu/Github-Ranking-FrontEnd&quot;&gt;GitHub Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MEAN" scheme="http://hackjutsu.com/categories/MEAN/"/>
    
    
      <category term="front end" scheme="http://hackjutsu.com/tags/front-end/"/>
    
      <category term="full stack" scheme="http://hackjutsu.com/tags/full-stack/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap Grid System</title>
    <link href="http://hackjutsu.com/2016/04/17/Bootstrap%20Grid%20System/"/>
    <id>http://hackjutsu.com/2016/04/17/Bootstrap Grid System/</id>
    <published>2016-04-18T01:00:01.000Z</published>
    <updated>2016-04-18T20:14:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/Q1Ou3PR.jpg" style="max-height: 400px;"></p>
<blockquote>
<p><strong>Note:</strong> This post is modified from <a href="http://stackoverflow.com/users/848184/shawn-taylor" target="_blank" rel="external">Shawn Tylor</a>‘s answer on StackOverflow. Please refer to the <a href="http://stackoverflow.com/a/24177022/3697757" target="_blank" rel="external">original link</a> or the Bootstrap documentation for more details.</p>
</blockquote>
<p>Here’s an attempt at a simple explanation for Bootstrap Grid system.</p>
<a id="more"></a>
<p>Ignoring the letters (<code>xs</code>, <code>sm</code>, <code>md</code>, <code>lg</code>) for now, I’ll start with just the numbers…</p>
<p><strong>The numbers (1-12) represent a portion of the total width of any div all divs are divided into 12 columns.</strong> So, <code>col-*-6</code> spans 6 of 12 columns (half the width), <code>col-*-12</code> spans 12 of 12 columns (the entire width), etc. If you want two equal columns to span a <code>div</code>, write<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span>Column 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span>Column 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Of if you want three unequal columns to span that same width, you could write:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-2"</span>&gt;</span>Column 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span>Column 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-4"</span>&gt;</span>Column 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>You’ll notice the # of columns always add up to 12. It can be less than 12, but beware if more than 12, as your offending divs will bump down to the next row (not <code>.row</code>, which is another story altogether).</p>
<p>You can also nest columns within columns, (best with a <code>.row</code> wrapper around them) such as:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-4"</span>&gt;</span>Column 1-a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8"</span>&gt;</span>Column 1-b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-2"</span>&gt;</span>Column 2-a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-10"</span>&gt;</span>Column 2-b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Each set of nested divs also span up to 12 columns of their parent <code>div</code>. Since each <code>.col</code> class has 15px padding on either side, you should usually wrap nested columns in a <code>.row</code>, which has -15px margins. This avoids duplicating the padding, and keeps the content lined up between nested and non-nested col classes.</p>
<p>– You didn’t specifically ask about the <code>xs</code>, <code>sm</code>, <code>md</code>, <code>lg</code> usage, but they go hand-in-hand so I can’t help but touch on it…</p>
<p>In short, they are used to define at which screen size that class should apply:</p>
<blockquote>
<p>xs = extra small screens (mobile phones)<br>sm = small screens (tablets)<br>md = medium screens (some desktops)<br>lg = large screens (remaining desktops)</p>
</blockquote>
<p>You should usually classify a div using multiple column classes so it behaves differently depending on the screen size (this is the heart of what makes bootstrap responsive). eg: a div with classes <code>col-xs-6</code> and <code>col-sm-4</code> will span half the screen on mobile phone (xs) and 1/3 of the screen on tablets(sm).<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 1/2 width on mobile, 1/3 screen on tablet) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-4"</span>&gt;</span>Column 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="comment">&lt;!-- 1/2 width on mobile, 2/3 width on tablet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-8"</span>&gt;</span>Column 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE:</strong> Grid classes for a given screen size apply to that screen size and larger unless another declaration overrides it (i.e. col-xs-6 col-md-4 spans 6 columns on xs and sm, and 4 columns on md and lg, even though sm and lg were never explicitly declared).</p>
<p>If you don’t define xs, it will default to col-xs-12 (i.e. col-sm-6 is half the width on sm, md and lg screens, but full-width on xs screens).</p>
<p>It’s actually totally fine if your .row includes more than 12 cols, as long as you are aware of how they will react. –This is a contentious issue, and not everyone agrees.</p>
</blockquote>
<h1 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h1><p><a href="http://stackoverflow.com/a/24177022/3697757" target="_blank" rel="external">http://stackoverflow.com/a/24177022/3697757</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Q1Ou3PR.jpg&quot; style=&quot;max-height: 400px;&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This post is modified from &lt;a href=&quot;http://stackoverflow.com/users/848184/shawn-taylor&quot;&gt;Shawn Tylor&lt;/a&gt;‘s answer on StackOverflow. Please refer to the &lt;a href=&quot;http://stackoverflow.com/a/24177022/3697757&quot;&gt;original link&lt;/a&gt; or the Bootstrap documentation for more details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here’s an attempt at a simple explanation for Bootstrap Grid system.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Bootstrap" scheme="http://hackjutsu.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Kendo Kata</title>
    <link href="http://hackjutsu.com/2016/04/10/Kendo%20Kata/"/>
    <id>http://hackjutsu.com/2016/04/10/Kendo Kata/</id>
    <published>2016-04-11T01:00:00.000Z</published>
    <updated>2016-08-04T22:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<figure><br>    <img src="http://i.imgur.com/TV7MAIx.png" style="max-height: 400px;"><br>    <figurecaption><i>Photo courtesy of <a href="http://kendomonochrome.com" target="_blank" rel="external">Kendo Monochrome</a></i></figurecaption><br></figure>

<p><strong>Kendo Kata</strong> are fixed patterns that teach kendoka (kendo practitioners) the basic elements of swordsmanship. There are two roles, uchidachi (打太刀), the teacher, and shidachi (仕太刀), the student. Kata were originally used to preserve the techniques and history of kenjutsu for future generations. Modern usage of kata is as a teaching tool to learn strike techniques, attack intervals, body movement, sincerity and kigurai (pride).</p>
<a id="more"></a>
<p>There are two types of Kendo kata. <em>Nihon Kendo Kata</em> was first finalized in 1912, in which the first seven kata use tachi(a long bokken) for both student and teacher, and the last three kata use tachi for the teacher and kodachi(a shorter bokken) for student.</p>
<p><em>Nihon Kendo Kata</em> receives criticism for continued usage of outdated forms. For example, kodachi are no longer used except when wielding two swords. This led to the development of the second type, <em>Bokuto Ni Yoru Kendo Kihon-waza Keiko-ho</em>.</p>
<p> <em>Bokuto Ni Yoru Kendo Kihon-waza Keiko-ho</em> is a new form of bokken training that is directly translatable to bogu Kendo. The first four waza are focused on attacking initiaion techniques, while the last five are focused on techniques for responding to an attack. Here is the technique table for <em>Bokuto Ni Yoru Kendo Kihon-waza Keiko-ho</em>.</p>
<table>
<thead>
<tr>
<th style="text-align:center">Name and Technique (Kihon)</th>
<th style="text-align:center">Strikes Used</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Ippon-uchi no waza</td>
<td style="text-align:center">Men, Kote, Dō, Tsuki</td>
</tr>
<tr>
<td style="text-align:center">Ni/Sandan no waza</td>
<td style="text-align:center">Kote, Men</td>
</tr>
<tr>
<td style="text-align:center">Harai waza</td>
<td style="text-align:center">Harai Men</td>
</tr>
<tr>
<td style="text-align:center">Hiki waza</td>
<td style="text-align:center">Tsubazeriai kara no Hiki Doh</td>
</tr>
<tr>
<td style="text-align:center">Nuki waza</td>
<td style="text-align:center">Men, Nuki Doh</td>
</tr>
<tr>
<td style="text-align:center">Suriage waza</td>
<td style="text-align:center">Kote, Suriage Men</td>
</tr>
<tr>
<td style="text-align:center">Debana waza</td>
<td style="text-align:center">Debana kote</td>
</tr>
<tr>
<td style="text-align:center">Kaeshi waza</td>
<td style="text-align:center">Men, Kaeshi Migi-Doh</td>
</tr>
<tr>
<td style="text-align:center">Uchiotoshi waza</td>
<td style="text-align:center">Doh uchiotoshi Men</td>
</tr>
</tbody>
</table>
<h2 id="Ippon-uchi-no-waza"><a href="#Ippon-uchi-no-waza" class="headerlink" title="Ippon-uchi no waza"></a>Ippon-uchi no waza</h2><p><strong>Action:</strong><br>Single cuts: Men, Kote, Dō, Tsuki<br><div class="video-container"><iframe src="//www.youtube.com/embed/UfL4aXfH1kQ" frameborder="0" allowfullscreen></iframe></div></p>
<h2 id="Ni-Sandan-no-waza"><a href="#Ni-Sandan-no-waza" class="headerlink" title="Ni/Sandan no waza"></a>Ni/Sandan no waza</h2><p><strong>Action:</strong><br>Two continuous cuts: Kote and Men<br><div class="video-container"><iframe src="//www.youtube.com/embed/doKyCga6h5I" frameborder="0" allowfullscreen></iframe></div></p>
<h2 id="Harai-waza"><a href="#Harai-waza" class="headerlink" title="Harai waza"></a>Harai waza</h2><p><strong>Actions:</strong><br>Harai waza: Harai Men (using omote the left side of your sword)<br><div class="video-container"><iframe src="//www.youtube.com/embed/UcxGPgWn2E8" frameborder="0" allowfullscreen></iframe></div></p>
<h2 id="Hiki-waza"><a href="#Hiki-waza" class="headerlink" title="Hiki waza"></a>Hiki waza</h2><p><strong>Action:</strong><br>Hiki waza: Hiki Dō (the right dō)<br><div class="video-container"><iframe src="//www.youtube.com/embed/zkTXrT85ziw" frameborder="0" allowfullscreen></iframe></div></p>
<h2 id="Nuki-waza"><a href="#Nuki-waza" class="headerlink" title="Nuki waza"></a>Nuki waza</h2><p><strong>Action:</strong><br>Nuki waza: Men Nuki Dō (the right dō)<br><div class="video-container"><iframe src="//www.youtube.com/embed/WgNQR2ZqEng" frameborder="0" allowfullscreen></iframe></div></p>
<h2 id="Suriage-waza"><a href="#Suriage-waza" class="headerlink" title="Suriage waza"></a>Suriage waza</h2><p><strong>Action:</strong><br>Suriage waza: Kote Suriage Men(using ura the right side of your sword)<br><div class="video-container"><iframe src="//www.youtube.com/embed/ja48MMyAW1U" frameborder="0" allowfullscreen></iframe></div></p>
<h2 id="Debana-waza"><a href="#Debana-waza" class="headerlink" title="Debana waza"></a>Debana waza</h2><p><strong>Action:</strong><br>Debana waza: Debana Kote<br><div class="video-container"><iframe src="//www.youtube.com/embed/iO6pyK_ZwX0" frameborder="0" allowfullscreen></iframe></div></p>
<h2 id="Kaeshi-waza"><a href="#Kaeshi-waza" class="headerlink" title="Kaeshi waza"></a>Kaeshi waza</h2><p><strong>Action:</strong><br>Kaeshi waza: Men Kaeshi Dō (the right dō)<br><div class="video-container"><iframe src="//www.youtube.com/embed/gqLryNlZsEo" frameborder="0" allowfullscreen></iframe></div></p>
<h2 id="Uchiotoshi-waza"><a href="#Uchiotoshi-waza" class="headerlink" title="Uchiotoshi waza"></a>Uchiotoshi waza</h2><p><strong>Action:</strong><br>Uchiotoshi waza: Dō Uchiotoshi Men (the right dō)<br><div class="video-container"><iframe src="//www.youtube.com/embed/7MibQ47wGfY" frameborder="0" allowfullscreen></iframe></div></p>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p><a href="https://en.wikipedia.org/wiki/Kendo_Kata" target="_blank" rel="external">Wikipedia: Kendo Kata</a><br><a href="http://www.kendo-guide.com/bokuto-ni-yoru-kendo-kihon-waza-keiko-ho.html" target="_blank" rel="external">Bokuto Ni Yoru Kendo Kihon Waza Keiko Ho</a></p>
<blockquote>
<p><strong>Disclaimer:</strong> All content provided on this <em><a href="hackjutsu.com">Hackjutsu Dojo</a></em> blog is for informational purposes only. The owner of this blog makes no representations as to the accuracy or completeness of any information on this site or found by following any link on this site.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;&lt;br&gt;    &lt;img src=&quot;http://i.imgur.com/TV7MAIx.png&quot; style=&quot;max-height: 400px;&quot;/&gt;&lt;br&gt;    &lt;figurecaption&gt;&lt;i&gt;Photo courtesy of &lt;a href=&quot;http://kendomonochrome.com&quot;&gt;Kendo Monochrome&lt;/a&gt;&lt;/i&gt;&lt;/figurecaption&gt;&lt;br&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Kendo Kata&lt;/strong&gt; are fixed patterns that teach kendoka (kendo practitioners) the basic elements of swordsmanship. There are two roles, uchidachi (打太刀), the teacher, and shidachi (仕太刀), the student. Kata were originally used to preserve the techniques and history of kenjutsu for future generations. Modern usage of kata is as a teaching tool to learn strike techniques, attack intervals, body movement, sincerity and kigurai (pride).&lt;/p&gt;
    
    </summary>
    
      <category term="Kendo" scheme="http://hackjutsu.com/categories/Kendo/"/>
    
    
      <category term="Kendo" scheme="http://hackjutsu.com/tags/Kendo/"/>
    
  </entry>
  
  <entry>
    <title>Hacking Your Customer Interview</title>
    <link href="http://hackjutsu.com/2016/03/22/Hacking%20your%20customer%20interview/"/>
    <id>http://hackjutsu.com/2016/03/22/Hacking your customer interview/</id>
    <published>2016-03-23T01:00:00.000Z</published>
    <updated>2016-03-22T23:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/bD9CTcq.jpg" style="max-height: 380px;"></p>
<blockquote>
<p>Too many startups begin with an idea for a product that they think people want. They then spend months, sometimes years, perfecting that product without ever showing the product, even in a very rudimentary form, to the prospective customer. When they fail to reach broad uptake from customers, it is often because they never spoke to prospective customers and determined whether or not the product was interesting. When customers ultimately communicate, through their indifference, that they don’t care about the idea, the startup fails. <em>– By Eric Ries</em></p>
</blockquote>
<a id="more"></a>
<p>Following the Lean Startup principles, I have been doing some research on how to interview with our customers for one of my hack week projects. Here are my notes for the research. Most of the content comes from <a href="http://customerdevlabs.com/" target="_blank" rel="external">Customer Developer Lab</a>, which is found by <a href="https://www.linkedin.com/in/justinwilcox" target="_blank" rel="external">Justin Wilcox</a>.</p>
<h2 id="Ground-Rules-for-Interviewing"><a href="#Ground-Rules-for-Interviewing" class="headerlink" title="Ground Rules for Interviewing"></a>Ground Rules for Interviewing</h2><p>Before we discuss about how to interview, let’s talk about what we should not do during an interview.</p>
<h3 id="No-Pitching"><a href="#No-Pitching" class="headerlink" title="No Pitching"></a>No Pitching</h3><p>This is about listening. If you find yourself trying to propose an idea and want to get feedback from it, <strong>STOP</strong>. This is pitching. It changes your mind from learning and absorbing information into trying to pitching something and sell a product. But our goal is all about learning and listening to your customers.</p>
<h3 id="NOT-Ask-Questions-about-Future"><a href="#NOT-Ask-Questions-about-Future" class="headerlink" title="NOT Ask Questions about Future"></a>NOT Ask Questions about Future</h3><p>Do not ask hypothetical questions about the future, like <em>“Would you…”</em> or <em>“Will you…”</em>. Instead, ask questions like <em>“Have you ever…”</em> or <em>“Tell me about the last time…”</em>. The reasons are if we are asking our customers about future, we are getting our customers’ predictions which are basically useless. Most customers don’t know their answers for the future and if they say something we happen to want to hear, we will be misled. Another reason is that if we begin to ask questions like <em>“Would you…”</em> or <em>“Will you…”</em>, we are actually pitching.</p>
<h2 id="What-to-ask"><a href="#What-to-ask" class="headerlink" title="What to ask?"></a>What to ask?</h2><h3 id="Customer-Interview-Script"><a href="#Customer-Interview-Script" class="headerlink" title="Customer Interview Script"></a>Customer Interview Script</h3><ol>
<li>Tell me a story about the last time <code>&lt;problem context&gt;</code>…</li>
<li>What was hardest?</li>
<li>Why was that hard?</li>
<li>How do you solve it now?</li>
<li>Why is that not awesome?</li>
</ol>
<p>The most trickiest part above is how to define the <code>&lt;problem context&gt;</code> for question #1. Let’s talk about an example shown in <a href="http://customerdevlabs.com/" target="_blank" rel="external">Justin Wilcox’s blog</a>. Assuming we want to build a vegetarian Yelp,  we don’t want the problem to be so specific that everyone could guess what you want to solve , like:</p>
<blockquote>
<p>Don’t ask: “What’s the hardest part about finding a good vegetarian restaurant in a new city?”</p>
</blockquote>
<p>And we don’t want to be so broad that we are inviting discussion about a range of problems we have no interest to solve:</p>
<blockquote>
<p>Don’t ask: “What’s the hardest part about eating out as a vegetarian?”</p>
</blockquote>
<p>We need to ask about a significant problem context:</p>
<blockquote>
<p>Ask: “What’s the hardest part about eating out as a vegetarian?”</p>
</blockquote>
<p>The answers to the last question will help us to validate our hypothesis, if they don’t, will point us to one if they do have.</p>
<h3 id="Bonus-Points"><a href="#Bonus-Points" class="headerlink" title="Bonus Points"></a>Bonus Points</h3><p>Fulfilling the script above is just the basics for the customer interview. Bonus will be given if we can achieve some of the points below.</p>
<ul>
<li><p><strong>Emotions</strong><br>Observe your customers’ emotion when they are talking about this problem. Try to understand them.</p>
</li>
<li><p><strong>Repeat for 3 times</strong><br>Repeat the above script for at least 3 times.</p>
<blockquote>
<p>Ask: “Tell me another time when you…”</p>
</blockquote>
</li>
<li><p><strong>3-Whys</strong><br>Apply the theory of <a href="http://www.inc.com/jason-surfrapp/the-theory-of-the-3-whys.html" target="_blank" rel="external">The 3-Whys</a> to understand a problem.</p>
</li>
</ul>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p><a href="http://customerdevlabs.com/" target="_blank" rel="external">Customer Dev Labs</a><br><a href="http://theleanstartup.com/" target="_blank" rel="external">The Lean Startup</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/bD9CTcq.jpg&quot; style=&quot;max-height: 380px;&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Too many startups begin with an idea for a product that they think people want. They then spend months, sometimes years, perfecting that product without ever showing the product, even in a very rudimentary form, to the prospective customer. When they fail to reach broad uptake from customers, it is often because they never spoke to prospective customers and determined whether or not the product was interesting. When customers ultimately communicate, through their indifference, that they don’t care about the idea, the startup fails. &lt;em&gt;– By Eric Ries&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Lean Startup" scheme="http://hackjutsu.com/tags/Lean-Startup/"/>
    
  </entry>
  
  <entry>
    <title>A Cup of Git Latte</title>
    <link href="http://hackjutsu.com/2016/03/12/A%20Cup%20of%20Git%20Latte/"/>
    <id>http://hackjutsu.com/2016/03/12/A Cup of Git Latte/</id>
    <published>2016-03-13T02:00:01.000Z</published>
    <updated>2016-09-26T17:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://git-scm.com/book/en/v2/book/01-introduction/images/areas.png" style="max-height: 350px;"></p>
<p>Quick reference for some frequently used Git commands.<br><a id="more"></a></p>
<blockquote>
<p><strong>Terminology convention:</strong> working tree –&gt; stage –&gt; local repo –&gt; remote repo</p>
</blockquote>
<h2 id="Set-up-a-new-repository"><a href="#Set-up-a-new-repository" class="headerlink" title="Set up a new repository"></a>Set up a new repository</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git pull https://github.com/registercosmo/Cheatsheet.git</div><div class="line">git remote add origin https://github.com/registercosmo/Cheatsheet.git</div><div class="line">git add .</div><div class="line">git status</div><div class="line">git commit</div><div class="line">git commit -m <span class="string">"comments"</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<hr>
<h2 id="Working-with-remote-repositories"><a href="#Working-with-remote-repositories" class="headerlink" title="Working with remote repositories"></a>Working with remote repositories</h2><h3 id="Set-up-remote-repository"><a href="#Set-up-remote-repository" class="headerlink" title="Set up remote repository"></a>Set up remote repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># set up a new remote repo (origin)</span></div><div class="line">git remote add origin &lt;new_remote_repo&gt;</div><div class="line"></div><div class="line"><span class="comment"># change URL for a remote repo (origin)</span></div><div class="line">git remote <span class="built_in">set</span>-url origin &lt;new_remote_repo&gt;</div><div class="line"></div><div class="line"><span class="comment"># list all the remote repo URLs</span></div><div class="line">git remote -v</div><div class="line"></div><div class="line"><span class="comment"># rename a remote repo (e.g. origin -&gt; my_source)</span></div><div class="line">git remote rename origin my_source</div></pre></td></tr></table></figure>
<h3 id="Sync-with-the-remote-repository"><a href="#Sync-with-the-remote-repository" class="headerlink" title="Sync with the remote repository"></a>Sync with the remote repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># To pull changes to working tree (= fetch + merge)</span></div><div class="line">git pull &lt;remote_repo&gt; master</div><div class="line"></div><div class="line"><span class="comment"># Download lastest changes(objects and refs) from remote repo</span></div><div class="line">git fetch &lt;remote_repo&gt;</div><div class="line"></div><div class="line"><span class="comment"># To merge the local repo and fetched changes</span></div><div class="line">git merge FETCH_HEAD</div><div class="line"></div><div class="line"><span class="comment"># To merge the origin/feature branch to the current branch</span></div><div class="line">git merge origin/feature</div></pre></td></tr></table></figure>
<h2 id="More-about-fetch-merge-pull"><a href="#More-about-fetch-merge-pull" class="headerlink" title="More about fetch, merge, pull"></a>More about fetch, merge, pull</h2><h3 id="More-about-fetch"><a href="#More-about-fetch" class="headerlink" title="More about fetch"></a>More about fetch</h3><blockquote>
<p><strong>git fetch</strong> —— Download objects and refs from another repository</p>
</blockquote>
<p><code>git fetch</code> fetches <em>branches</em> and/or <em>tags</em> (collectively, <em>refs</em>) from one or more other repositories, along with the objects necessary to complete their histories. Remote-tracking branches are updated.</p>
<p>When no remote is specified, by default the <code>origin</code> remote will be used, unless there’s an upstream branch configured for the current branch.</p>
<p>The names of refs that are fetched, together with the object names they point at, are written to <code>.git/FETCH_HEAD</code>.This information may be used by scripts or other git commands, such as <code>git-pull</code>.  The <code>FETCH_HEAD</code> is just a reference to the tip of the last fetch, whether that fetch was initiated directly using the fetch command or as part of a pull.</p>
<h4 id="branch-lt-name-gt-fetch"><a href="#branch-lt-name-gt-fetch" class="headerlink" title="branch.&lt; name &gt;.fetch"></a>branch.&lt; name &gt;.fetch</h4><p>When we have the <code>branch.&lt;name&gt;.fetch</code> set as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[remote &quot;origin&quot;] fetch = +refs/heads/*:refs/remotes/origin/*</div></pre></td></tr></table></figure></p>
<p>This configuration is used in two ways:</p>
<h5 id="Without-specifying-branches"><a href="#Without-specifying-branches" class="headerlink" title="Without specifying branches"></a>Without specifying branches</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch origin</div></pre></td></tr></table></figure>
<p>The above command copies all branches from the remote <code>refs/heads/</code> namespace and stores them to the local <code>refs/remotes/origin/</code> namespace, unless the <code>branch.&lt;name&gt;.fetch</code> option is used to specify a non-default refspec.</p>
<h5 id="Specifying-branches"><a href="#Specifying-branches" class="headerlink" title="Specifying branches"></a>Specifying branches</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch origin master</div></pre></td></tr></table></figure>
<p>This command will fetch only the master branch. The <code>remote.&lt;repository&gt;.fetch</code> values determine which remote-tracking branch, if any, is updated.</p>
<h3 id="More-about-merge"><a href="#More-about-merge" class="headerlink" title="More about merge"></a>More about merge</h3><blockquote>
<p><strong>git merge</strong> —— Join two or more development histories together</p>
</blockquote>
<p><code>git merge</code> incorporates changes from the named commits (since the time their histories diverged from the current branch) into the current branch.</p>
<p>Assume the following history exists and <em>the current branch is “master”</em>:</p>
<pre><code>  A---B---C topic
 /
D---E---F---G master
</code></pre><p>Then <code>git merge topic</code> will replay the changes made on the topic branch since it diverged from master (E) until its current commit (C) on top of master, and record the result in a new commit (H) along with the names of the two parent commits and a log message from the user describing the changes.</p>
<pre><code>  A---B---C topic
 /         \
D---E---F---G---H master
</code></pre><h4 id="Pre-merge-checks"><a href="#Pre-merge-checks" class="headerlink" title="Pre-merge checks"></a>Pre-merge checks</h4><p>Before performing any merge, we should make sure our codes are in good shape and commit all local changes. <code>git pull</code> and <code>git merge</code> will stop without doing anything when local uncommitted changes overlap with files that <code>git pull</code>/<code>git merge</code> may need to update.</p>
<p>To avoid recording unrelated changes in the merge commit, <code>git pull</code> and <code>git merge</code> will also abort if there are any changes registered in the index relative to the <code>HEAD</code> commit.  (One exception is when the changed index entries are in the state that would result from the merge already.)</p>
<p>If all named commits are already ancestors of <code>HEAD</code>, <code>git merge</code> will exit early with the message “Already up-to-date.”</p>
<h4 id="Fast-forward-merge"><a href="#Fast-forward-merge" class="headerlink" title="Fast-forward merge"></a>Fast-forward merge</h4><p>Often the current branch head is an ancestor of the named commit. This is the most common case especially when invoked from <code>git pull</code>: we are tracking an upstream repository, we have committed no local changes, and now we want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history; instead, the <code>HEAD</code> (along with the index) is updated to point at the named commit, without creating an extra merge commit.</p>
<p>This behavior can be suppressed with the <code>--no-ff</code> option.</p>
<h4 id="True-merge"><a href="#True-merge" class="headerlink" title="True merge"></a>True merge</h4><p>Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that has both of them as its parents.</p>
<p>A merged version reconciling the changes from all branches to be merged is committed, and our <code>HEAD</code>, index, and working tree are updated to it. It is possible to have modifications in the working tree as long as they do not overlap; the update will preserve them.</p>
<p>When it is not obvious how to reconcile the changes, the following happens:</p>
<ol>
<li><p>The <code>HEAD</code> pointer stays the same.</p>
</li>
<li><p>The <code>MERGE_HEAD</code> ref is set to point to the other branch head.</p>
</li>
<li><p>Paths that merged cleanly are updated both in the index file and in our working tree.</p>
</li>
<li><p>For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common ancestor, stage 2 from <code>HEAD</code>, and stage 3 from <code>MERGE_HEAD</code> (we can inspect the stages with <code>git ls-files -u</code>). The working tree files contain the result of the “merge” program; i.e. 3-way merge results with familiar conflict markers <code>&lt;&lt;&lt;</code> <code>===</code> <code>&gt;&gt;&gt;</code>.</p>
</li>
<li><p>No other changes are made. In particular, the local modifications we had before we started merge will stay the same and the index entries for them stay as they were, i.e. matching <code>HEAD</code>.</p>
</li>
</ol>
<p>If we tried a merge which resulted in complex conflicts and want to start over, we can recover with <code>git merge --abort</code>.</p>
<h4 id="Resolve-conflicts"><a href="#Resolve-conflicts" class="headerlink" title="Resolve conflicts"></a>Resolve conflicts</h4><p>After seeing a conflict, we can do two things:</p>
<ul>
<li><p><strong>Decide not to merge.</strong> The only clean-ups we need are to reset the index file to the <code>HEAD</code> commit to reverse 2. and to clean up working tree changes made by 2. and 3.; <code>git merge --abort</code> can be used for this.</p>
</li>
<li><p><strong>Resolve the conflicts.</strong> Git will mark the conflicts in the working tree. Edit the files into shape and git add them to the index. Use <code>git commit</code> to seal the deal.</p>
</li>
</ul>
<h3 id="More-about-pull"><a href="#More-about-pull" class="headerlink" title="More about pull"></a>More about pull</h3><blockquote>
<p><strong>git pull</strong> —— Fetch from and integrate with another repository or a local branch</p>
</blockquote>
<p><code>git pull</code> incorporates changes from a remote repository into the current branch. In its default mode, <code>git pull</code> is shorthand for <code>git fetch</code> followed by <code>git merge FETCH_HEAD</code>.</p>
<p>More precisely, <code>git pull</code> runs <code>git fetch</code> with the given parameters and calls git merge to <strong>merge the retrieved branch heads into the current branch</strong>. See the <em>More about config variables</em> for more details.</p>
<ul>
<li><p>Update the remote-tracking branches for the repository we cloned from, then merge one of them into our current branch:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull, git pull origin</div></pre></td></tr></table></figure>
<p>Normally the branch merged in is the <code>HEAD</code> of the remote repository, but the choice is determined by the <code>branch.&lt;name&gt;.remote</code> and <code>branch.&lt;name&gt;.merge</code> options.</p>
</li>
<li><p>To merge a specific remote branch <code>next</code> into our current branch, we can run:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin next</div></pre></td></tr></table></figure>
<p>This leaves a copy of next temporarily in <code>FETCH_HEAD</code>, but does not update any remote-tracking branches. Using remote-tracking branches, the same can be done by invoking fetch and merge:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git fetch origin</div><div class="line">git merge origin/next</div></pre></td></tr></table></figure>
</li>
</ul>
<p>If we tried a pull which resulted in complex conflicts and would want to start over, we can recover with <code>git reset</code>.</p>
<hr>
<h2 id="Fix-the-previous-commit"><a href="#Fix-the-previous-commit" class="headerlink" title="Fix the previous commit"></a>Fix the previous commit</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit --amend</div></pre></td></tr></table></figure>
<hr>
<h2 id="Undo-changes"><a href="#Undo-changes" class="headerlink" title="Undo changes"></a>Undo changes</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># unstage changes but keep the local changes in the working tree</span></div><div class="line">git reset HEAD</div><div class="line"></div><div class="line"><span class="comment"># discard all the changes in the stage and working tree</span></div><div class="line"><span class="comment"># and match the working tree the commit B</span></div><div class="line">git reset --hard B</div><div class="line"></div><div class="line"><span class="comment"># move the HEAD to commit B, no modification will be made</span></div><div class="line"><span class="comment"># to the stage and the working tree</span></div><div class="line">git reset --soft B</div></pre></td></tr></table></figure>
<hr>
<h2 id="Untrack-files"><a href="#Untrack-files" class="headerlink" title="Untrack files"></a>Untrack files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm --cached &lt;file_name&gt;</div></pre></td></tr></table></figure>
<hr>
<h2 id="About-branches"><a href="#About-branches" class="headerlink" title="About branches"></a>About branches</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># fetch remote branches from Github</span></div><div class="line">git remote add origin &lt;ULR&gt; <span class="comment"># we have to set origin first</span></div><div class="line">git pull <span class="comment"># it will pull(fetch + merge) all available branches from repositories</span></div><div class="line"></div><div class="line"><span class="comment"># check info for all available branches</span></div><div class="line">git branch</div><div class="line"></div><div class="line"><span class="comment"># create a new branch</span></div><div class="line">git branch  &lt;new_branch_name&gt;</div><div class="line"></div><div class="line"><span class="comment"># switch to a specific branch</span></div><div class="line">git checkout  &lt;new_branch_name&gt;</div><div class="line"></div><div class="line"><span class="comment"># create and switch to a new branch</span></div><div class="line">git checkout -b &lt;new_branch_name&gt;</div><div class="line"></div><div class="line"><span class="comment"># check the current branch</span></div><div class="line">git status</div><div class="line"></div><div class="line"><span class="comment"># rename a branch</span></div><div class="line">git branch -m &lt;old_branch_name&gt; &lt;new_branch_name&gt;</div><div class="line"></div><div class="line"><span class="comment"># merge a specific branch to the current branch</span></div><div class="line">git merge &lt;another_branch_name&gt;</div><div class="line"></div><div class="line"><span class="comment"># delete a branch localy</span></div><div class="line">git branch <span class="_">-d</span> &lt;branch_name&gt;</div><div class="line"></div><div class="line"><span class="comment"># delete a branch remotely</span></div><div class="line">git push origin :&lt;branch_name&gt;</div><div class="line"></div><div class="line"><span class="comment"># push local branch A to remote branch B</span></div><div class="line">git push origin &lt;<span class="built_in">local</span> branch&gt;:&lt;remote branch&gt;</div></pre></td></tr></table></figure>
<hr>
<h2 id="About-diff"><a href="#About-diff" class="headerlink" title="About diff"></a>About diff</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># inspect all the modifications between working tree and stage</span></div><div class="line">git diff</div><div class="line"></div><div class="line"><span class="comment"># inspect all the modifications between stage and local repo</span></div><div class="line">git diff --cached</div></pre></td></tr></table></figure>
<hr>
<h2 id="About-configs"><a href="#About-configs" class="headerlink" title="About configs"></a>About configs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># configs for all repositories</span></div><div class="line">git config --global user.name <span class="comment"># check current global user.name</span></div><div class="line">git config --global user.name &lt;My username&gt; <span class="comment"># set global user.name</span></div><div class="line">git config --global user.email <span class="comment"># check current global user.email</span></div><div class="line">git config --gloabl user.email myemail@example.com <span class="comment"># set global user.name</span></div><div class="line"></div><div class="line"><span class="comment"># configs for the current local repository</span></div><div class="line">git config user.name <span class="comment"># check current local user.name</span></div><div class="line">git config user.name &lt;My username&gt; <span class="comment"># set local user.name</span></div><div class="line">git config user.email <span class="comment"># check current local user.email</span></div><div class="line">git config user.email myemail@example.com <span class="comment"># set local user.name</span></div><div class="line"></div><div class="line"><span class="comment"># list all the configs</span></div><div class="line">git config --list</div><div class="line"></div><div class="line"><span class="comment"># Remove the configs</span></div><div class="line">git config --global --unset-all user.name <span class="comment"># global</span></div><div class="line"></div><div class="line"><span class="comment"># Change the configs</span></div><div class="line">git config --global --replace-all user.name &lt;New User Name&gt; <span class="comment"># global</span></div></pre></td></tr></table></figure>
<h3 id="More-about-config-variables"><a href="#More-about-config-variables" class="headerlink" title="More about config variables"></a>More about config variables</h3><ul>
<li><p><strong><code>branch.&lt;name&gt;.remote</code></strong><br>When on <code>branch &lt;name&gt;</code>, it tells <em>git fetch</em> and <em>git push</em> which remote to fetch from/push to.</p>
</li>
<li><p><strong><code>branch.&lt;name&gt;.merge</code></strong><br>Defines, together with <code>branch.&lt;name&gt;.remote</code>, the upstream branch for the given branch. It tells <em>git fetch/git pull/git rebase</em> which branch to merge and can also affect <em>git push</em> (see push.default). When in <code>branch &lt;name&gt;</code>, it tells <em>git fetch</em> the default refspec to be marked for merging in <code>FETCH_HEAD</code>.</p>
</li>
<li><p><strong><code>branch.&lt;name&gt;.pushRemote</code></strong><br>When on <code>branch &lt;name&gt;</code>, it overrides <code>branch.&lt;name&gt;.remote</code> for pushing. It also overrides <code>remote.pushDefault</code> for pushing from <code>branch &lt;name&gt;</code>. When we pull from one place (e.g. our upstream) and push to another place (e.g. our own publishing repository), we would want to set <code>remote.pushDefault</code> to specify the remote to push to for all branches, and use this option to override it for a specific branch.</p>
</li>
<li><p><strong><code>remote.pushDefault</code></strong><br>The remote to push to by default. Overrides <code>branch.&lt;name&gt;.remote</code> for all branches, and is overridden by <code>branch.&lt;name&gt;.pushRemote</code> for specific branches.</p>
</li>
</ul>
<hr>
<h2 id="View-history-for-a-file"><a href="#View-history-for-a-file" class="headerlink" title="View history for a file"></a>View history for a file</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Show commit history of a specific file</span></div><div class="line">git <span class="built_in">log</span> --follow -p &lt;file&gt;</div><div class="line"></div><div class="line"><span class="comment"># Show details of a specific commit</span></div><div class="line">git show &lt;commit id&gt;</div><div class="line"></div><div class="line"><span class="comment"># Show what revision and author last modified each line of a file</span></div><div class="line">git blame &lt;file&gt;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Files-info-about-index-working-tree"><a href="#Files-info-about-index-working-tree" class="headerlink" title="Files info about index/working tree"></a>Files info about index/working tree</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git ls-files</div><div class="line">    (--[cached|deleted|others|ignored|stage|unmerged|killed|modified])</div><div class="line">    (-[c|d|o|i|s|u|k|m])</div></pre></td></tr></table></figure>
<hr>
<h2 id="Advanced-topics"><a href="#Advanced-topics" class="headerlink" title="Advanced topics"></a>Advanced topics</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># get the SHA-1 key for a specific contents</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'test content'</span> | git <span class="built_in">hash</span>-object -w --stdin</div><div class="line"></div><div class="line"><span class="comment"># get the content of a SHA-1 key</span></div><div class="line">git cat-file -p &lt;key&gt;</div><div class="line"></div><div class="line"><span class="comment"># get a object type for a SHA-1 key</span></div><div class="line">git cat-file -t &lt;key&gt;</div><div class="line"></div><div class="line"><span class="comment"># list the contents of a tree object</span></div><div class="line">git ls-tree &lt;tree_key&gt;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p><a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a><br><a href="http://www.open-open.com/lib/view/open1328069889514.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1328069889514.html</a></p>
<blockquote>
<p><strong>Disclaimer:</strong> This is my personal notes for Git reference. Some of the notes come from my daily experience and some come from other existing Git tutorials or documentations.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://git-scm.com/book/en/v2/book/01-introduction/images/areas.png&quot; style=&quot;max-height: 350px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Quick reference for some frequently used Git commands.&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://hackjutsu.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Kanban敏捷开发</title>
    <link href="http://hackjutsu.com/2016/02/12/Kanban%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    <id>http://hackjutsu.com/2016/02/12/Kanban敏捷开发/</id>
    <published>2016-02-13T02:00:00.000Z</published>
    <updated>2016-08-04T22:00:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/U6TqWxL.png" style="max-height: 300px;"></p>
<p><code>Kanban</code>是敏捷开发（Agile Development）的一种实现模式。</p>
<p>早在1940年，日本丰田公司已借鉴超市库存的管理方法来改善自身的工作流程。超市在管理库存的时候，总希望库存量尽可能与消费者的需求接近，以减少不必要的库存。只要库存量能够及时根据消费者的需求量来调节，超市就能极大地提高仓库的运行效率，从而最终为自身和消费者都创造价值。丰田公司采用了这种及时管理模式（<em>Just In Time</em>， <em>JIT</em>）。</p>
<a id="more"></a>
<p>在丰田公司内部，当一个组完成现有任务并准备好接受下一个任务时，它会把这个信息通过向其他组递出一张卡片，或者<code>Kanban</code>，来传达。虽然现代<code>Kanban</code>工作流程有了很大改进，但是它依然保留着<em>Just In Time</em>的核心理念。</p>
<blockquote>
<p>简单来说，及时制度（JIT）主要的核心是“让正确的物资，在正确的时间，流动到正确的地方，数量是刚刚好的数量。” <em>– Wikipedia</em></p>
</blockquote>
<p>这种管理模式同样适用于管理软件开发。</p>
<hr>
<h2 id="尽早发现瓶颈"><a href="#尽早发现瓶颈" class="headerlink" title="尽早发现瓶颈"></a>尽早发现瓶颈</h2><p><img src="http://i.imgur.com/4c1hLhB.png" alt=""></p>
<p>假设一个小组的工作流程为一个pipeline。如果里面的testers一周只能测试5个features，那么即使developers一周能实现10个新features，整个小组一周也只能交付5个features。这里，testers就是pipeline中的瓶颈。</p>
<p>假如这个瓶颈没有被发现，那么testers面前的任务就会堆积如山，尽管如此，整个小组的效率并没有得到提高。</p>
<p><img src="http://i.imgur.com/EMcKcF8.png" alt=""></p>
<p>如果问题得不到解决，developers辛辛苦苦实现出来的新features无法及时投放市场，最终将可能导致错失商机。更有严重的是，如果testers为了提高效率，降低对质量的要求，将有可能导致低质量的代码进入到产品中。 从另外一个角度来说，如果团队及时发现瓶颈所在，就能对此作出调节。比如，他们可以调派更多的testers，或者让部分developers帮助完成部分的test automation工作。</p>
<p>所以，我们回到一开始的主题，看看<code>Kanban</code>如何及时地向团队反馈当前的瓶颈！</p>
<h2 id="举一个栗子"><a href="#举一个栗子" class="headerlink" title="举一个栗子"></a>举一个栗子</h2><p><code>Kanban</code>管理模式简洁而有力。一个简单的<code>Kanban</code>系统甚至可以由一张大纸板，和贴在上面的便签组成。</p>
<p>在这个系统中，大纸板上画有多个列表。一个列代表一个的工作步骤，一张便签即代表一个的任务。每个任务都经过这个工作流程从最左边的列流向最右边的列。每个列顶部有一个数字limit，代表该列最大便签容量。</p>
<p>这个容量limit是<code>Kanban</code>和管理模式最大的不同。通过限制某步骤的最大容量，<code>Kanban</code>能够防止过度生产（overproduction），并动态地揭示流程的瓶颈。</p>
<blockquote>
<p>Limiting work-in-progress reveals the bottlenecks so you can address them.</p>
</blockquote>
<p>在下面的栗子中，Test一栏已经达到了它最大的工作容量3，不能够放入新的任务。Analysis和Development因为Test进度的原因，无法把已经完成的任务挪到下一栏，也到达了它们的最大容量（3和5）而不能放入新任务。通过Kanban表格，团队发现Test成为了瓶颈，并开始思考如何帮助testers改进测试环节的效率。</p>
<p><img src="http://i.imgur.com/KssgGef.png" alt=""></p>
<p>当testers完成了一个任务之后，这个任务便签就被挪到Deploy一栏。</p>
<p><img src="http://i.imgur.com/ISwO9uT.png" alt=""></p>
<p>由于现在Test一栏终于可以接受新任务了，Test、Development、Analysis从各自上一栏中挪入一个新的任务便签。</p>
<p><img src="http://i.imgur.com/HfjazC5.png" alt=""></p>
<p>从上面的例子可以看出，<code>Kanban</code>能够动态地展示团队工作流程的瓶颈。一旦Project Manager发现某个环节影响到团队进度，ta可以及时调配资源改进这个环节。</p>
<h2 id="四大核心原则"><a href="#四大核心原则" class="headerlink" title="四大核心原则"></a>四大核心原则</h2><p><code>Kanban</code>从脱胎自丰田公司的工程管理方法以来，在不同领域都有发展出具有领域特色的实现形式。虽然形式多样，但是它们始终遵循着下面一些核心原则。（<code>Kanban</code>有四大原则和五大原则两种不同说法，这里我们采用了较为流行的四大原则说法）</p>
<p>为了表述准确，我们这里直接引用了文章 <a href="http://leankit.com/learn/kanban/what-is-kanban/" target="_blank" rel="external"><em>LeanKit：What is Kanban？</em></a> 中对这四大原则的阐释。</p>
<ul>
<li>Visualize the workflow</li>
<li>Limit Work in Process</li>
<li>Focus on Flow</li>
<li>Continuous Improvement</li>
</ul>
<blockquote>
<p><strong>Visualize the workflow</strong><br>By creating a visual model of your work and workflow, you can observe the flow of work moving through your Kanban system. Making the work visible—along with blockers, bottlenecks and queues—instantly leads to increased communication and collaboration.</p>
<p><strong>Limit Work in Process</strong><br>By limiting how much unfinished work is in process, you can reduce the time it takes an item to travel through the Kanban system. You can also avoid problems caused by task switching and reduce the need to constantly reprioritize items.</p>
<p><strong>Focus on Flow</strong><br>By using work-in-process (WIP) limits and developing team-driven policies, you can optimize your Kanban system to improve the smooth flow of work, collect metrics to analyze flow, and even get leading indicators of future problems by analyzing the flow of work.</p>
<p><strong>Continuous Improvement</strong><br>Once your Kanban system is in place, it becomes the cornerstone for a culture of continuous improvement. Teams measure their effectiveness by tracking flow, quality, throughput, lead times and more. Experiments and analysis can change the system to improve the team’s effectiveness.</p>
</blockquote>
<h2 id="Scrum-vs-Kanban"><a href="#Scrum-vs-Kanban" class="headerlink" title="Scrum vs. Kanban"></a>Scrum vs. Kanban</h2><p><code>Kanban</code> 和 <code>Scrum</code> 虽然有很多相似的概念，但是它们是两种不同的项目管理方法。这里，我们引用文章 <a href="https://www.atlassian.com/agile/kanban/" target="_blank" rel="external"><em>Atlassian: A brief introduction to kanban</em></a> 中的一个表格来比较两者之间的不同。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Item</th>
<th style="text-align:center">SCRUM</th>
<th style="text-align:center">KANBAN</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>Cadence</strong></td>
<td style="text-align:center">Regular fixed length sprints (ie, 2 weeks)</td>
<td style="text-align:center">Continuous flow</td>
</tr>
<tr>
<td style="text-align:center"><strong>Release methodology</strong></td>
<td style="text-align:center">At the end of each sprint if approved by the product owner</td>
<td style="text-align:center">Continuous delivery or at the team’s discretion</td>
</tr>
<tr>
<td style="text-align:center"><strong>Roles</strong></td>
<td style="text-align:center">Product owner, scrum master, development team</td>
<td style="text-align:center">No existing roles. Some teams enlist the help of an agile coach.</td>
</tr>
<tr>
<td style="text-align:center"><strong>Key metrics</strong></td>
<td style="text-align:center">Velocity</td>
<td style="text-align:center">Cycle time</td>
</tr>
<tr>
<td style="text-align:center"><strong>Change philosophy</strong></td>
<td style="text-align:center">Teams should strive to not make changes to the sprint forecast during the sprint. Doing so compromises learnings around estimation.</td>
<td style="text-align:center">Change can happen at any time</td>
</tr>
</tbody>
</table>
<p>有的团队把<code>Kanban</code>和<code>Scrum</code>两种方法糅合成一种叫做<code>Scrumban</code>的方法。这个方法吸取了<code>Scrum</code>中固定长度的<em>Sprint</em>和各种角色（<em>Product Owner</em>、<em>Sprint Master</em>等等）概念，同时也吸收了<code>Kanban</code>中“Focus on Flow” 和 “Limit Work In Progress”等原则。但是，刚开始采用Agile的团队建议只采取<code>Scrum</code>和<code>Kanban</code>中的一种，在熟练掌握所选方法后才根据团队特点进行相应的糅合或创新。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://hackjutsu.com/2016/02/12/Kanban%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/#.VsDuYeaSMoI.google_plusone_share">Kanban敏捷开发</a><br> <a href="https://www.atlassian.com/agile/kanban/" target="_blank" rel="external">Atlassian: A brief introduction to kanban</a><br> <a href="http://leankit.com/learn/kanban/what-is-kanban/" target="_blank" rel="external">LeanKit：What is Kanban？</a><br> <a href="http://kanbanblog.com/explained/" target="_blank" rel="external">Kanban Blog：What is Kanban?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/U6TqWxL.png&quot; style=&quot;max-height: 300px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kanban&lt;/code&gt;是敏捷开发（Agile Development）的一种实现模式。&lt;/p&gt;
&lt;p&gt;早在1940年，日本丰田公司已借鉴超市库存的管理方法来改善自身的工作流程。超市在管理库存的时候，总希望库存量尽可能与消费者的需求接近，以减少不必要的库存。只要库存量能够及时根据消费者的需求量来调节，超市就能极大地提高仓库的运行效率，从而最终为自身和消费者都创造价值。丰田公司采用了这种及时管理模式（&lt;em&gt;Just In Time&lt;/em&gt;， &lt;em&gt;JIT&lt;/em&gt;）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Agile" scheme="http://hackjutsu.com/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title>微信二维码登录原理</title>
    <link href="http://hackjutsu.com/2016/01/30/%E5%BE%AE%E4%BF%A1%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%99%BB%E5%BD%95%E5%8E%9F%E7%90%86/"/>
    <id>http://hackjutsu.com/2016/01/30/微信二维码登录原理/</id>
    <published>2016-01-31T02:00:01.000Z</published>
    <updated>2016-11-17T01:38:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/JKjXbeH.jpg" style="max-height: 350px;"></p>
<p><a href="https://wx.qq.com/" target="_blank" rel="external">网页登陆</a>是<em>微信4.2</em>以后版本提供的一种全新的登陆方式。用户只需要用手机扫一扫微信网页中的二维码，就能马上实现微信网页登陆。<br><a id="more"></a></p>
<p>这种登陆方式虽然炫酷，但是多少有些违背直觉：</p>
<ul>
<li>网页端是怎么知道是哪个微信账号扫它的呢？</li>
<li>前后两个事件是如何联系起来的呢？</li>
<li>这种登陆方式安全么？</li>
<li>为什么微信选择这种验证方式呢？</li>
<li>这种登陆方式还可以延伸到其他应用场景么？</li>
</ul>
<p>出于对这些问题的好奇，我和隔壁老王做了一番探索~</p>
<hr>
<h2 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h2><p>今天隔壁老王在刚买的笔记本上体验了一把网页微信。他是这么做的：</p>
<ol>
<li>在网页打开<code>https://wx.qq.com/</code>，这时网页显示的是一个二维码。</li>
<li>用手机打开微信，使用扫一扫功能扫描屏幕上的二维码。</li>
<li>扫描成功后，手机微信询问是否<code>确认登陆网页版微信</code>，点击确认后网页微信登陆成功。</li>
</ol>
<p><strong>让我们慢镜头重放这个过程：</strong><br>当老王访问 <code>https://wx.qq.com/</code>，他在网页中得到一个二维码。</p>
<p><img src="http://i.imgur.com/sOFCZWO.png" style="max-height: 350px;"></p>
<p>在这个过程中，老王的浏览器和微信服务器之间建立了一个阻塞的长链接，同时服务器还专门为老王新开了一个有独立UID为<code>SWJNSjNJblBJQT09</code>的Session，并把这个UID嵌入到二维码中返回。</p>
<blockquote>
<p>注意，这个UID只是一个随机不重复数，并不是Session ID。</p>
</blockquote>
<p>老王看到二维码后，使用手机微信中的扫一扫功能读取了二维码中的UID。手机微信把具有老王身份信息的<strong>token A</strong>和这个<code>SWJNSjNJblBJQT09</code>的UID打包并做一些特殊的处理后，发给微信服务器进行确认。</p>
<blockquote>
<p><strong>隔壁老王: </strong>  我们可以使用其他二维码扫描软件来登陆吗？<br><strong>Cosmo: </strong>  二维码的转码规则是统一的。任何二维码扫描软件都可扫除里面包含的信息。比如上图扫出的结果是<code>https://login.weixin.qq.com/l/IbMJ3InPIA==</code>。但是只有微信app能够把包含用户身份信息的token和这个扫描结果做处理，然后与微信服务器通信，告知它是老王扫了这个二维码。所以，重要的不是扫描二维码中的信息，而是谁扫描了这个信息。</p>
</blockquote>
<p>当微信服务器通过确认时，它已经同时获得了用户老王和UID为<code>SWJNSjNJblBJQT09</code>的网页端的信息，并知道老王将要通过UID为 <code>SWJNSjNJblBJQT09</code>的Session来访问微信服务。因为老王是一个真实的用户，所以微信服务器就给UID为<code>SWJNSjNJblBJQT09</code>的Session分配一个<strong>token B</strong>，让老王能够在一定限定条件下访问微信服务。<em>由于网页在加载时候已经把大部分相关资源都预先加载进来了</em>，这个长链接得到确认信息后，网页端只需要加载用户列表，所以响应速度很快，也不需要手动刷新。</p>
<blockquote>
<p><strong>隔壁老王:</strong>  限定条件是什么呢？<br><strong>Cosmo:</strong> 具体条件要问腾讯才知道，但是这些限定不外乎限定访问时间、限定同时登陆设备数、电脑休眠后Toekn自动收回等等。</p>
</blockquote>
<p>现在，老王理论上算是登陆成功了。但是为了不显得突兀，微信服务器贴心地给老王手机发个<code>确认登陆网页版微信</code>的信息，让老王做最后一个确认操作。</p>
<blockquote>
<p><strong>隔壁老王:</strong>  这种登陆方式安全嘛？<br><strong>Cosmo:</strong> 由于整个验证过程在手机和服务器这个闭环中运行的，有效杜绝了电脑端泛滥的木马和病毒，并且二维码的生成和访问都通过SSL安全通道完成，这种登陆方式在现阶段来说应该是安全的。当然，要保管好手机。</p>
</blockquote>
<p>至此为止，老王成功登陆了网页微信啦！</p>
<hr>
<h2 id="背后原因"><a href="#背后原因" class="headerlink" title="背后原因"></a>背后原因</h2><p><strong>酷炫爽说</strong><br>张小龙多次提到“营销的目的是让用户觉得‘爽’。口碑传播的基础是‘好玩’。爽是体验，体验比功能更易传播。” “趣味性大于功能，用户要的是‘爽’。” 所以，这种登陆方式的提出是微信的一种基于“爽”字的营销手段。</p>
<p><strong>入口争夺说</strong><br>张小龙曾强调“PC的入口在搜索框，手机上的入口在二维码”。所以二维码扫描登陆时微信抢占手机入口的重要一环，日后微信将通过这个入口变革我们的登陆方式，最终变成我们的移动身份证。现成的一个例子就是通过扫描智能电视上的二维码登陆账号。</p>
<p><strong>借鉴说</strong><br>有一派说法是，微信这个二维码登陆借鉴自日本的Line。有趣的是，目前Line已经关闭这项服务。所以这就是日本人精于战术疏于战略的例子？</p>
<p><strong>移动核心说</strong><br>这样的设计突出了移动O2O核心，突出了微信是为移动而生的理念。</p>
<p><strong>阴谋论说</strong><br>微信对腾讯某部门冲击太大，受到限制？（瞎猜的）</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>引用知乎<a href="https://www.zhihu.com/people/huang-liang-yi-69" target="_blank" rel="external">黄良懿</a>的回复作为微信二维码登陆的总结：</p>
<blockquote>
<p>所以说，核心过程应该是：浏览器获得一个临时 id，通过长连接等待客户端扫描带有此 id 的二维码后，从长连接中获得客户端上报给 server 的帐号信息进行展示。 并在客户端点击确认后，获得服务器授信的令牌，进行随后的信息交互过程。 在超时、网络断开、其他设备上登录后，此前获得的令牌或丢失、或失效，对授权过程形成有效的安全防护。</p>
</blockquote>
<p>下次研究一下陌陌……</p>
<hr>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.zhihu.com/question/20368066" target="_blank" rel="external">知乎：微信扫描二维码登录网页是什么原理，前后两个事件是如何联系的？</a><br><a href="http://www.biaodianfu.com/weixin-qrcode.html" target="_blank" rel="external">微信二维码登录的原理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/JKjXbeH.jpg&quot; style=&quot;max-height: 350px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wx.qq.com/&quot;&gt;网页登陆&lt;/a&gt;是&lt;em&gt;微信4.2&lt;/em&gt;以后版本提供的一种全新的登陆方式。用户只需要用手机扫一扫微信网页中的二维码，就能马上实现微信网页登陆。&lt;br&gt;
    
    </summary>
    
      <category term="System Design" scheme="http://hackjutsu.com/categories/System-Design/"/>
    
    
      <category term="System Design" scheme="http://hackjutsu.com/tags/System-Design/"/>
    
  </entry>
  
  <entry>
    <title>秒杀系统架构分析与实战</title>
    <link href="http://hackjutsu.com/2016/01/25/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E6%88%98/"/>
    <id>http://hackjutsu.com/2016/01/25/秒杀系统架构分析与实战/</id>
    <published>2016-01-26T02:00:01.000Z</published>
    <updated>2016-11-17T01:39:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/rj5CIs9.jpg" style="max-height: 350px;"></p>
<p>互联网正在高速发展，使用互联网服务的用户越多，高并发的场景也变得越来越多。电商秒杀和抢购，是两个比较典型的互联网高并发场景。虽然我们解决问题的具体技术方案可能千差万别，但是遇到的挑战却是相似的，因此解决问题的思路也异曲同工。<br><a id="more"></a></p>
<blockquote>
<p>本文转载自<strong>51CTO</strong>，向<a href="http://my.oschina.net/xianggao" target="_blank" rel="external">原作者</a>致敬！如有侵权或不周之处，劳烦联系博主，谢谢！<a href="http://developer.51cto.com/art/201601/503511.htm" target="_blank" rel="external">点击原文</a></p>
</blockquote>
<hr>
<h2 id="秒杀业务分析"><a href="#秒杀业务分析" class="headerlink" title="秒杀业务分析"></a>秒杀业务分析</h2><p><strong>正常电子商务流程</strong><br> 查询商品 — 创建订单 — 扣减库存 — 更新订单 — 付款 — 卖家发货</p>
<p><strong>秒杀业务的特性</strong><br>低廉价格、大幅推广、 瞬时售空、定时上架、瞬时并发量高</p>
<hr>
<h2 id="秒杀技术挑战"><a href="#秒杀技术挑战" class="headerlink" title="秒杀技术挑战"></a>秒杀技术挑战</h2><p>假设某网站秒杀活动只推出一件商品，预计会吸引1万人参加活动，也就说最大并发请求数是10000，秒杀系统需要面对以下挑战。</p>
<h3 id="·-对现有网站业务造成冲击"><a href="#·-对现有网站业务造成冲击" class="headerlink" title="· 对现有网站业务造成冲击"></a>· 对现有网站业务造成冲击</h3><p>秒杀活动只是网站营销的一个附加活动，这个活动具有时间短，并发访问量大的特点，如果和网站原有应用部署在一起，必然会对现有业务造成冲击，稍有不慎可能导致整个网站瘫痪。</p>
<blockquote>
<p><strong>解决方案</strong>：将秒杀系统独立部署，甚至<em>使用独立域名，使其与网站完全隔离</em>。</p>
</blockquote>
<h3 id="·-高并发下的应用、数据库负载"><a href="#·-高并发下的应用、数据库负载" class="headerlink" title="· 高并发下的应用、数据库负载"></a>· 高并发下的应用、数据库负载</h3><p>用户在秒杀开始前，通过不停刷新浏览器页面以保证不会错过秒杀，这些请求如果按照一般的网站应用架构，访问应用服务器、连接数据库，会对应用服务器和数据库服务器造成负载压力。</p>
<blockquote>
<p><strong>解决方案</strong>：重新设计秒杀商品页面，不使用网站原来的商品详细页面，<em>页面内容静态化，用户请求不需要经过应用服务</em>。</p>
</blockquote>
<h3 id="·-突然增加的网络及服务器带宽"><a href="#·-突然增加的网络及服务器带宽" class="headerlink" title="· 突然增加的网络及服务器带宽"></a>· 突然增加的网络及服务器带宽</h3><p>假设商品页面大小200K（主要是商品图片大小，那么需要的网络和服务器带宽是2G（200K×10000），这些网络带宽是因为秒杀活动新增的，超过网站平时使用的带宽。</p>
<blockquote>
<p><strong>解决方案</strong>：因为秒杀新增的网络带宽，必须和运营商重新购买或者租借。为了减轻网站服务器的压力，<em>需要将秒杀商品页面缓存在CDN，同样需要和CDN服务商临时租借新增的出口带宽</em>。</p>
</blockquote>
<h3 id="·-直接下单"><a href="#·-直接下单" class="headerlink" title="· 直接下单"></a>· 直接下单</h3><p>秒杀的游戏规则是到了秒杀才能开始对商品下单购买，在此时间点之前，只能浏览商品信息，不能下单。而下单页面也是一个普通的URL，如果得到这个URL，不用等到秒杀开始就可以下单了。</p>
<blockquote>
<p><strong>解决方案</strong>：为了避免用户直接访问下单页面URL，需要将改URL动态化，即使秒杀系统的开发者也无法在秒杀开始前访问下单页面的URL。办法是在<em>下单页面URL加入由服务器端生成的随机数作为参数，在秒杀开始的时候才能得到。</em></p>
</blockquote>
<h3 id="·-如何控制秒杀商品页面购买按钮的点亮"><a href="#·-如何控制秒杀商品页面购买按钮的点亮" class="headerlink" title="· 如何控制秒杀商品页面购买按钮的点亮"></a>· 如何控制秒杀商品页面购买按钮的点亮</h3><p>购买按钮只有在秒杀开始的时候才能点亮，在此之前是灰色的。如果该页面是动态生成的，当然可以在服务器端构造响应页面输出，控制该按钮是灰色还是点亮，但是为了减轻服务器端负载压力，更好地利用CDN、反向代理等性能优化手段，该页面被设计为静态页面，缓存在CDN、反向代理服务器上，甚至用户浏览器上。秒杀开始时，用户刷新页面，请求根本不会到达应用服务器。</p>
<blockquote>
<p><strong>解决方案</strong>：使用JavaScript脚本控制，<em>在秒杀商品静态页面中加入一个JavaScript文件引用</em>，该JavaScript文件中包含秒杀开始标志为否；当秒杀开始的时候生成一个新的JavaScript文件（文件名保持不变，只是内容不一样，更新秒杀开始标志为是，<em>加入下单页面的URL及随机数参数（这个随机数只会产生一个，即所有人看到的URL都是同一个，服务器端可以用redis这种分布式缓存服务器来保存随机数）</em>，并被用户浏览器加载，控制秒杀商品页面的展示。<em>这个JavaScript文件的加载可以加上随机版本号（例如xx.js?v=32353823），这样就不会被浏览器、CDN和反向代理服务器缓存</em>。</p>
</blockquote>
<h3 id="·-如何只允许第一个提交的订单被发送到订单子系统"><a href="#·-如何只允许第一个提交的订单被发送到订单子系统" class="headerlink" title="· 如何只允许第一个提交的订单被发送到订单子系统"></a>· 如何只允许第一个提交的订单被发送到订单子系统</h3><p>由于最终能够成功秒杀到商品的用户只有一个，因此需要在用户提交订单时，检查是否已经有订单提交。如果已经有订单提交成功，则需要更新 JavaScript文件，更新秒杀开始标志为否，购买按钮变灰。事实上，由于最终能够成功提交订单的用户只有一个，为了减轻下单页面服务器的负载压力， 可以控制进入下单页面的入口，只有少数用户能进入下单页面，其他用户直接进入秒杀结束页面。</p>
<blockquote>
<p><strong>解决方案</strong>：假设下单服务器集群有10台服务器，每台服务器只接受最多10个下单请求。在还没有人提交订单成功之前，如果一台服务器已经有十单了，而有的一单都没处理，可能出现的用户体验不佳的场景是用户第一次点击购买按钮进入已结束页面，再刷新一下页面，有可能被一单都没有处理的服务器处理，进入了填写订单的页面，<em>可以考虑通过cookie的方式来应对，符合一致性原则</em>。当然可以采用最少连接的负载均衡算法，出现上述情况的概率大大降低。</p>
</blockquote>
<h3 id="·-如何进行下单前置检查"><a href="#·-如何进行下单前置检查" class="headerlink" title="· 如何进行下单前置检查"></a>· 如何进行下单前置检查</h3><p><strong>下单服务器检查本机已处理的下单请求数目</strong>：如果超过10条，直接返回已结束页面给用户；如果未超过10条，则用户可进入填写订单及确认页面。</p>
<p><strong>检查全局已提交订单数目</strong>：已超过秒杀商品总数，返回已结束页面给用户；未超过秒杀商品总数，提交到子订单系统。</p>
<h3 id="·-减库存的操作"><a href="#·-减库存的操作" class="headerlink" title="· 减库存的操作"></a>· 减库存的操作</h3><p>有两种选择，一种是<strong>拍下减库存</strong> 另外一种是<strong>付款减库存</strong>；目前采用的“拍下减库存”的方式，拍下就是一瞬间的事，对用户体验会好些。</p>
<h3 id="·-库存会带来“超卖”的问题：售出数量多于库存数量"><a href="#·-库存会带来“超卖”的问题：售出数量多于库存数量" class="headerlink" title="· 库存会带来“超卖”的问题：售出数量多于库存数量"></a>· 库存会带来“超卖”的问题：售出数量多于库存数量</h3><p>由于库存并发更新的问题，导致在实际库存已经不足的情况下，库存依然在减，导致卖家的商品卖得件数超过秒杀的预期。</p>
<blockquote>
<p><strong>解决方案</strong>：采用<a href="https://en.wikipedia.org/wiki/Optimistic_concurrency_control" target="_blank" rel="external">乐观锁 (Optimistic concurrency control)</a>。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">update auction_auctions set</div><div class="line">quantity = #inQuantity#</div><div class="line">where auction_id = #itemId# and quantity = #dbQuantity#</div></pre></td></tr></table></figure>
<h3 id="·-秒杀器的应对"><a href="#·-秒杀器的应对" class="headerlink" title="· 秒杀器的应对"></a>· 秒杀器的应对</h3><p>秒杀器一般下单个购买及其迅速，根据购买记录可以甄别出一部分。可以通过校验码达到一定的方法，这就要求校验码足够安全，不被破解，采用的方式有：<em>秒杀专用验证码，电视公布验证码，秒杀答题</em>。</p>
<hr>
<h2 id="秒杀架构原则"><a href="#秒杀架构原则" class="headerlink" title="秒杀架构原则"></a>秒杀架构原则</h2><p><strong>尽量将请求拦截在系统上游</strong></p>
<p>传统秒杀系统之所以挂，请求都压倒了后端数据层，数据读写锁冲突严重，并发高响应慢，几乎所有请求都超时，流量虽大，下单成功的有效流量甚小（一趟火车其实只有2000张票，200w个人来买，基本没有人能买成功，请求有效率为0）。</p>
<p><strong>读多写少的常用多使用缓存</strong></p>
<p>这是一个典型的读多写少的应用场景（一趟火车其实只有2000张票，200w个人来买，最多2000个人下单成功，其他人都是查询库存，写比例只有0.1%，读比例占99.9%），非常适合使用缓存。</p>
<hr>
<h2 id="秒杀架构设计"><a href="#秒杀架构设计" class="headerlink" title="秒杀架构设计"></a>秒杀架构设计</h2><p>秒杀系统为秒杀而设计，不同于一般的网购行为，参与秒杀活动的用户更关心的是如何能快速刷新商品页面，在秒杀开始的时候抢先进入下单页面，而不是商品详情等用户体验细节，因此秒杀系统的页面设计应尽可能简单。</p>
<p>商品页面中的购买按钮只有在秒杀活动开始的时候才变亮，在此之前及秒杀商品卖出后，该按钮都是灰色的，不可以点击。</p>
<p>下单表单也尽可能简单，购买数量只能是一个且不可以修改，送货地址和付款方式都使用用户默认设置，没有默认也可以不填，允许等订单提交后修改；只有第一个提交的订单发送给网站的订单子系统，其余用户提交订单后只能看到秒杀结束页面。</p>
<p>要做一个这样的秒杀系统，业务会分为两个阶段，<em>第一个阶段是秒杀开始前某个时间到秒杀开始</em>， 这个阶段可以称之为<strong>准备阶段</strong>，用户在准备阶段等待秒杀； <em>第二个阶段就是秒杀开始到所有参与秒杀的用户获得秒杀结果</em>， 这个就称为<strong>秒杀阶段</strong>。</p>
<h3 id="·-前端层设计"><a href="#·-前端层设计" class="headerlink" title="· 前端层设计"></a>· 前端层设计</h3><p>首先要有一个展示秒杀商品的页面， 在这个页面上做一个秒杀活动开始的倒计时， <em>在准备阶段内用户会陆续打开这个秒杀的页面， 并且可能不停的刷新页面</em>。这里需要考虑两个问题：</p>
<p><strong>第一个是秒杀页面的展示</strong></p>
<p>我们知道一个html页面还是比较大的，即使做了压缩，http头和内容的大小也可能高达数十K，加上其他的css， js，图片等资源，如果同时有几千万人参与一个商品的抢购，一般机房带宽也就只有1G~10G，<em>网络带宽就极有可能成为瓶颈</em>，所以这个页面上<em>各类静态资源首先应分开存放，然后放到cdn节点上分散压力</em>，由于CDN节点遍布全国各地，能缓冲掉绝大部分的压力，而且还比机房带宽便宜~</p>
<p><strong>第二个是倒计时</strong></p>
<p>出于性能原因这个一般由js调用客户端本地时间，就有可能出现客户端时钟与服务器时钟不一致，另外服务器之间也是有可能出现时钟不一致。<em>客户端与服务器时钟不一致可以采用客户端定时和服务器同步时间</em>，这里考虑一下性能问题，<em>用于同步时间的接口由于不涉及到后端逻辑，只需要将当前web服务器的时间发送给客户端就可以了，因此速度很快</em>，就我以前测试的结果来看，一台标准的web服务器2W+QPS不会有问题，如果100W人同时刷，100W QPS也只需要50台web，一台硬件LB就可以了~，并且web服务器群是可以很容易的横向扩展的(LB+DNS轮询)，这个接口可以只返回一小段json格式的数据，而且可以优化一下减少不必要cookie和其他http头的信息，所以数据量不会很大，<em>一般来说网络不会成为瓶颈，即使成为瓶颈也可以考虑多机房专线连通，加智能DNS的解决方案</em>；web服务器之间时间不同步可以采用统一时间服务器的方式，<em>比如每隔1分钟所有参与秒杀活动的web服务器就与时间服务器做一次时间同步</em>。</p>
<p><strong>浏览器层请求拦截</strong></p>
<ol>
<li>产品层面，用户点击“查询”或者“购票”后，按钮置灰，禁止用户重复提交请求;</li>
<li>JS层面，限制用户在x秒之内只能提交一次请求;</li>
</ol>
<h3 id="·-站点层设计"><a href="#·-站点层设计" class="headerlink" title="· 站点层设计"></a>· 站点层设计</h3><p>前端层的请求拦截，只能拦住小白用户（不过这是99%的用户哟），高端的程序员根本不吃这一套，写个for循环，直接调用你后端的http请求，怎么整？</p>
<ol>
<li><em>同一个uid，限制访问频度</em>，做页面缓存，x秒内到达站点层的请求，均返回同一页面</li>
<li><em>同一个item的查询，例如手机车次</em>，做页面缓存，x秒内到达站点层的请求，均返回同一页面</li>
</ol>
<p>如此限流，又有99%的流量会被拦截在站点层。</p>
<h3 id="·-服务层设计"><a href="#·-服务层设计" class="headerlink" title="· 服务层设计"></a>· 服务层设计</h3><p>站点层的请求拦截，只能拦住普通程序员，高级黑客，假设他控制了10w台肉鸡（并且假设买票不需要实名认证），这下uid的限制不行了吧？怎么整？</p>
<p>（1）大哥，我是服务层，我清楚的知道小米只有1万部手机，我清楚的知道一列火车只有2000张车票，我透10w个请求去数据库有什么意义呢？<em>对于写请求，做请求队列，每次只透过有限的写请求去数据层，如果均成功再放下一批，如果库存不够则队列里的写请求全部返回“已售完”</em>；</p>
<p>（2）对于读请求，还用说么？cache来抗，不管是memcached还是redis，单机抗个每秒10w应该都是没什么问题的；</p>
<p>如此限流，只有非常少的写请求，和非常少的读缓存mis的请求会透到数据层去，又有99.9%的请求被拦住了。</p>
<h4 id="用户请求分发模块"><a href="#用户请求分发模块" class="headerlink" title="用户请求分发模块"></a>用户请求分发模块</h4><p>使用Nginx或Apache将用户的请求分发到不同的机器上。</p>
<h4 id="用户请求预处理模块"><a href="#用户请求预处理模块" class="headerlink" title="用户请求预处理模块"></a>用户请求预处理模块</h4><p>判断商品是不是还有剩余来决定是不是要处理该请求。经过HTTP服务器的分发后，单个服务器的负载相对低了一些，但总量依然可能很大，如果后台商品已经被秒杀完毕，那么直接给后来的请求返回秒杀失败即可，不必再进一步发送事务了，示例代码可以如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> seckill;</div><div class="line"><span class="keyword">import</span> org.apache.http.HttpRequest;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 预处理阶段，把不必要的请求直接驳回，必要的请求添加到队列中进入下一阶段.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreProcessor</span> </span>&#123;</div><div class="line">  <span class="comment">// 商品是否还有剩余</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> stocks = <span class="keyword">true</span>;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">forbidden</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// Do something.</span></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkStocks</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (stocks) &#123;</div><div class="line">          <span class="comment">// 远程检测是否还有剩余，该RPC接口应由数据库服务器提供，不必完全严格检查.</span></div><div class="line">          <span class="keyword">if</span> (!RPC.checkStocks()) &#123;</div><div class="line">              stocks = <span class="keyword">false</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> stocks;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 每一个HTTP请求都要经过该预处理.</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preProcess</span><span class="params">(HttpRequest request)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (checkStocks()) &#123;</div><div class="line">          <span class="comment">// 一个并发的队列</span></div><div class="line">          RequestQueue.queue.add(request);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 如果已经没有商品了，则直接驳回请求即可.</span></div><div class="line">          forbidden();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="并发队列的选择"><a href="#并发队列的选择" class="headerlink" title="并发队列的选择"></a>并发队列的选择</h5><p>Java的并发包提供了三个常用的并发队列实现，分别是：<code>ConcurrentLinkedQueue</code> 、 <code>LinkedBlockingQueue</code> 和 <code>ArrayBlockingQueue</code>。</p>
<ul>
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ArrayBlockingQueue.html" target="_blank" rel="external">ArrayBlockingQueue</a>是初始容量固定的阻塞队列，我们可以用来作为数据库模块成功竞拍的队列，比如有10个商品，那么我们就设定一个10大小的数组队列。</li>
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html" target="_blank" rel="external">ConcurrentLinkedQueue</a>使用的是CAS原语无锁队列实现，是一个异步队列，入队的速度很快，出队进行了加锁，性能稍慢。</li>
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingQueue.html" target="_blank" rel="external">LinkedBlockingQueue</a>也是阻塞的队列，入队和出队都用了加锁，当队空的时候线程会暂时阻塞。</li>
</ul>
<p>由于我们的系统入队需求要远大于出队需求，一般不会出现队空的情况，所以我们可以选择<code>ConcurrentLinkedQueue</code>来作为我们的请求队列实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> seckill;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</div><div class="line"><span class="keyword">import</span> org.apache.http.HttpRequest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestQueue</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentLinkedQueue&lt;HttpRequest&gt; queue =</div><div class="line">            <span class="keyword">new</span> ConcurrentLinkedQueue&lt;HttpRequest&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="用户请求处理模块"><a href="#用户请求处理模块" class="headerlink" title="用户请求处理模块"></a>用户请求处理模块</h4><p>把通过预处理的请求封装成事务提交给数据库，并返回是否成功。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> seckill;</div><div class="line"><span class="keyword">import</span> org.apache.http.HttpRequest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Processor</span> </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 发送秒杀事务到数据库队列.</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">kill</span><span class="params">(BidInfo info)</span> </span>&#123;</div><div class="line">      DB.bids.add(info);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</div><div class="line">      BidInfo info = <span class="keyword">new</span> BidInfo(RequestQueue.queue.poll());</div><div class="line">      <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</div><div class="line">          kill(info);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BidInfo</span> </span>&#123;</div><div class="line">  BidInfo(HttpRequest request) &#123;</div><div class="line">      <span class="comment">// Do something.</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="数据库接口模块"><a href="#数据库接口模块" class="headerlink" title="数据库接口模块"></a>数据库接口模块</h4><p>该模块是数据库的唯一接口，负责与数据库交互，提供RPC接口供查询是否秒杀结束、剩余数量等信息。数据库主要是使用一个<code>ArrayBlockingQueue</code>来暂存有可能成功的用户请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> seckill;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="comment">/**</span></div><div class="line">* DB应该是数据库的唯一接口.</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DB</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">10</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ArrayBlockingQueue&lt;BidInfo&gt; bids = <span class="keyword">new</span> ArrayBlockingQueue&lt;BidInfo&gt;(<span class="number">10</span>);</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkStocks</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// TODO</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 单线程操作</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bid</span><span class="params">()</span> </span>&#123;</div><div class="line">      BidInfo info = bids.poll();</div><div class="line">      <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>) &#123;</div><div class="line">          <span class="comment">// insert into table Bids values(item_id, user_id, bid_date, other)</span></div><div class="line">          <span class="comment">// select count(id) from Bids where item_id = ?</span></div><div class="line">          <span class="comment">// 如果数据库商品数量大约总数，则标志秒杀已完成，设置标志位stocks = false.</span></div><div class="line">          info = bids.poll();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="·-数据库设计"><a href="#·-数据库设计" class="headerlink" title="· 数据库设计"></a>· 数据库设计</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><strong>概念一：单库</strong></p>
<p><img src="http://i.imgur.com/FEUJWK3.png" alt=""></p>
<p><strong>概念二：分片</strong></p>
<p><img src="http://i.imgur.com/Trc0a0C.png" alt=""></p>
<blockquote>
<p>分片（<a href="https://en.wikipedia.org/wiki/Partition_%28database%29" target="_blank" rel="external">Partition</a>）解决的是“数据量太大”的问题，也就是通常说的“水平切分”。</p>
</blockquote>
<p>一旦引入分片，势必有“数据路由”的概念，哪个数据访问哪个库。路由规则通常有3种方法：</p>
<ol>
<li><p>范围：range<br>优点：简单，容易扩展<br>缺点：各库压力不均（新号段更活跃）</p>
</li>
<li><p>哈希：hash（大部分互联网公司采用的方案二：哈希分库，哈希路由）<br>优点：简单，数据均衡，负载均匀<br>缺点：迁移麻烦（2库扩3库数据要迁移）</p>
</li>
<li><p>路由服务：router-config-server<br>优点：灵活性强，业务与路由算法解耦<br>缺点：每次访问数据库前多一次查询</p>
</li>
</ol>
<p><strong>概念三：分组</strong></p>
<p>分组解决“可用性”问题，分组通常通过主从复制的方式实现。</p>
<p><img src="http://i.imgur.com/GGFUoAL.png" alt=""></p>
<p>互联网公司数据库实际软件架构是：又分片，又分组（如下图）</p>
<p><img src="http://i.imgur.com/DULYzmH.png" alt=""></p>
<h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><p>数据库软件架构师平时设计些什么东西呢？至少要考虑以下四点：</p>
<ol>
<li>如何保证数据可用性</li>
<li>如何提高数据库读性能（大部分应用读多写少，读会先成为瓶颈）</li>
<li>如何保证一致性</li>
<li>如何提高扩展性</li>
</ol>
<h5 id="如何保证数据可用性"><a href="#如何保证数据可用性" class="headerlink" title="如何保证数据可用性"></a>如何保证数据可用性</h5><blockquote>
<p>解决可用性的思路是冗余。</p>
</blockquote>
<p>如何保证站点的可用性？复制站点，冗余站点。<br>如何保证服务的可用性？复制服务，冗余服务。<br>如何保证数据的可用性？复制数据，冗余数据。</p>
<p>数据的冗余，会带来一个副作用=&gt;引发一致性问题（先不说一致性问题，先说可用性）。</p>
<h5 id="如何保证数据库“读”高可用性"><a href="#如何保证数据库“读”高可用性" class="headerlink" title="如何保证数据库“读”高可用性"></a>如何保证数据库“读”高可用性</h5><blockquote>
<p>冗余读库</p>
</blockquote>
<p><em>冗余读库带来的副作用？读写有延时，可能不一致。</em></p>
<p><img src="http://i.imgur.com/CVVwYKN.png" alt=""></p>
<p>上面这个图是很多互联网公司mysql的架构，写仍然是单点，不能保证写高可用。</p>
<h5 id="如何保证数据库“写”高可用性"><a href="#如何保证数据库“写”高可用性" class="headerlink" title="如何保证数据库“写”高可用性"></a>如何保证数据库“写”高可用性</h5><blockquote>
<p>冗余写库</p>
</blockquote>
<p><img src="http://i.imgur.com/IDVd04m.png" alt=""></p>
<p>采用双主互备的方式，可以冗余写库带来的副作用？双写同步，数据可能冲突（例如“自增id”同步冲突）,如何解决同步冲突，有两种常见解决方案：</p>
<ol>
<li>两个写库使用不同的初始值，相同的步长来增加id：1写库的id为0,2,4,6…；2写库的id为1,3,5,7…；</li>
<li>不使用数据的id，业务层自己生成唯一的id，保证数据不冲突；</li>
</ol>
<p>实际中没有使用上述两种架构来做读写的“高可用”，采用的是<code>双主当主从用</code>的方式：</p>
<p><img src="http://i.imgur.com/oXlyMxU.png" alt=""></p>
<p>仍是双主，但<em>只有一个主提供服务（读+写），另一个主是“shadow-master”，只用来保证高可用，平时不提供服务。</em> master挂了，shadow-master顶上（vip漂移，对业务层透明，不需要人工介入）。<br>这种方式的<strong>好处</strong>：</p>
<ul>
<li>读写没有延时；</li>
<li>读写高可用；</li>
</ul>
<p><strong>不足</strong>：</p>
<ul>
<li>不能通过加从库的方式扩展读性能；</li>
<li>资源利用率为50%，一台冗余主没有提供服务；</li>
</ul>
<p>那如何提高读性能呢？进入第二个话题，如何提供读性能。</p>
<h5 id="如何拓展“读”性能"><a href="#如何拓展“读”性能" class="headerlink" title="如何拓展“读”性能"></a>如何拓展“读”性能</h5><blockquote>
<p>服务+数据库+缓存</p>
</blockquote>
<p><img src="http://i.imgur.com/2Y3NL5w.png" alt=""></p>
<p>业务层不直接面向db和cache，服务层屏蔽了底层db、cache的复杂性。为什么要引入服务层，今天不展开，采用了“服务+数据库+缓存”的方式提供数据访问，用cache提高读性能。</p>
<p>当数据需要复制多份时（db+cache），会引发一致性问题。</p>
<h5 id="如何保证一致性"><a href="#如何保证一致性" class="headerlink" title="如何保证一致性"></a>如何保证一致性</h5><p><strong>(1) 主从数据库的一致性</strong></p>
<blockquote>
<p>通常有两种解决方案：中间件 和 强制读主。</p>
</blockquote>
<p><code>中间件</code>：如果某一个key有写操作，在不一致时间窗口内，中间件会将这个key的读操作也路由到主库上。这个方案的缺点是，数据库中间件的门槛较高（百度，腾讯，阿里，360等一些公司有）。</p>
<p><img src="http://i.imgur.com/vrO3Sy2.png" alt=""></p>
<p><code>强制读主</code>： 下面实际用的“双主当主从用”的架构，不存在主从不一致的问题。</p>
<p><img src="http://i.imgur.com/W0azJ5l.png" alt=""></p>
<p><strong>(2) db与缓存间的不一致</strong></p>
<p><img src="http://i.imgur.com/0vcR7zK.png" alt=""></p>
<p>常见的缓存架构如上，此时写操作的顺序是：</p>
<ol>
<li>淘汰cache</li>
<li>写数据库</li>
</ol>
<p>读操作的顺序是：</p>
<ol>
<li>读cache，如果cache hit则返回</li>
<li>如果cache miss，则读从库</li>
<li>读从库后，将数据放回cache</li>
</ol>
<p>在一些异常时序情况下，有可能从（从库读到旧数据，若同步还没有完成，旧数据入cache后），数据会长期不一致。解决办法是“缓存双淘汰”，写操作时序升级为：</p>
<ol>
<li>淘汰cache</li>
<li>写数据库</li>
<li>在经验“主从同步延时窗口时间”后，再次发起一个异步淘汰cache的请求</li>
</ol>
<p>这样，即使有脏数据如cache，一个小的时间窗口之后，脏数据还是会被淘汰。带来的代价是，多引入一次读miss（成本可以忽略）。</p>
<blockquote>
<p>除此之外，最佳实践之一是：建议为所有cache中的item设置一个超时时间。</p>
</blockquote>
<h5 id="如何提高数据库的扩展性"><a href="#如何提高数据库的扩展性" class="headerlink" title="如何提高数据库的扩展性"></a>如何提高数据库的扩展性</h5><p>原来用hash的方式路由，分为2个库，数据量还是太大，要分为3个库，势必需要进行数据迁移，有一个很帅气的<code>数据库秒级扩容</code>方案。</p>
<p>首先，我们不做2库变3库的扩容，我们做2库变4库（库加倍）的扩容（未来4-&gt;8-&gt;16）</p>
<p><img src="http://i.imgur.com/gMsGJoh.png" alt=""></p>
<p>服务+数据库是一套（省去了缓存），<em>数据库采用“双主”的模式</em>。</p>
<p><strong>扩容步骤：</strong></p>
<ol>
<li>将一个主库提升;</li>
<li>修改配置，2库变4库（原来MOD2，现在配置修改后MOD4），扩容完成；</li>
</ol>
<p>原MOD2为偶的部分，现在会MOD4余0或者2；原MOD2为奇的部分，现在会MOD4余1或者3；数据不需要迁移，同时，双主互相同步，一遍是余0，一边余2，两边数据同步也不会冲突，秒级完成扩容！</p>
<p>最后，要做一些<strong>收尾工作</strong>：</p>
<ol>
<li>将旧的双主同步解除；</li>
<li>增加新的双主（双主是保证可用性的，shadow-master平时不提供服务）；</li>
<li>删除多余的数据（余0的主，可以将余2的数据删除掉）；</li>
</ol>
<p><img src="http://i.imgur.com/WrFRsoF.png" alt=""></p>
<p>这样，秒级别内，我们就完成了2库变4库的扩展。</p>
<hr>
<h2 id="大并发带来的挑战"><a href="#大并发带来的挑战" class="headerlink" title="大并发带来的挑战"></a>大并发带来的挑战</h2><h3 id="·-请求接口的合理设计"><a href="#·-请求接口的合理设计" class="headerlink" title="· 请求接口的合理设计"></a>· 请求接口的合理设计</h3><p>一个秒杀或者抢购页面，通常分为2个部分，一个是<em>静态的HTML等内容</em>，另一个就是<em>参与秒杀的Web后台请求接口</em>。</p>
<p><em>通常静态HTML等内容，是通过CDN的部署，一般压力不大，核心瓶颈实际上在后台请求接口上</em>。这个后端接口，必须能够支持高并发请求，同时，非常重要的一点，必须尽可能“快”，在最短的时间里返回用户的请求结果。<em>为了实现尽可能快这一点，接口的后端存储使用内存级别的操作会更好一点</em>。仍然直接面向MySQL之类的存储是不合适的，<em>如果有这种复杂业务的需求，都建议采用异步写入</em>。</p>
<p><img src="http://i.imgur.com/7nvLMV7.png" alt=""></p>
<p>当然，也有一些秒杀和抢购采用“<em>滞后反馈</em>”，就是说秒杀当下不知道结果，一段时间后才可以从页面中看到用户是否秒杀成功。但是，这种属于“偷懒”行为，同时给用户的体验也不好，容易被用户认为是“暗箱操作”。</p>
<h3 id="·-高并发的挑战：一定要“快”"><a href="#·-高并发的挑战：一定要“快”" class="headerlink" title="· 高并发的挑战：一定要“快”"></a>· 高并发的挑战：一定要“快”</h3><p>我们通常衡量一个<em>Web系统的吞吐率的指标是QPS（Query Per Second，每秒处理请求数），解决每秒数万次的高并发场景，这个指标非常关键</em>。举个例子，我们假设处理一个业务请求平均响应时间为100ms，同时，系统内有20台Apache的Web服务器，配置MaxClients为500个（表示Apache的最大连接数目）。</p>
<p>那么，我们的Web系统的理论峰值QPS为（理想化的计算方式）：</p>
<blockquote>
<p>20*500/0.1 = 100000 （10万QPS）</p>
</blockquote>
<p>咦？我们的系统似乎很强大，1秒钟可以处理完10万的请求，5w/s的秒杀似乎是“纸老虎”哈。实际情况，当然没有这么理想。<em>在高并发的实际场景下，机器都处于高负载的状态，在这个时候平均响应时间会被大大增加</em>。</p>
<p><em>就Web服务器而言，Apache打开了越多的连接进程，CPU需要处理的上下文切换也越多，额外增加了CPU的消耗，然后就直接导致平均响应时间增加。</em>因此上述的MaxClient数目，要根据CPU、内存等硬件因素综合考虑，绝对不是越多越好。<em>可以通过Apache自带的abench来测试一下，取一个合适的值</em>。然后，<em>我们选择内存操作级别的存储的Redis，在高并发的状态下，存储的响应时间至关重要</em>。网络带宽虽然也是一个因素，不过，这种请求数据包一般比较小，一般很少成为请求的瓶颈。负载均衡成为系统瓶颈的情况比较少，在这里不做讨论哈。</p>
<p>那么问题来了，假设我们的系统，在5w/s的高并发状态下，平均响应时间从100ms变为250ms（实际情况，甚至更多）：</p>
<blockquote>
<p>20*500/0.25 = 40000 （4万QPS）</p>
</blockquote>
<p>于是，我们的系统剩下了4w的QPS，面对5w每秒的请求，中间相差了1w。</p>
<p>然后，这才是真正的恶梦开始。举个例子，高速路口，1秒钟来5部车，每秒通过5部车，高速路口运作正常。突然，这个路口1秒钟只能通过4部车，车流量仍然依旧，结果必定出现大塞车。（5条车道忽然变成4条车道的感觉）。</p>
<p>同理，某一个秒内，20*500个可用连接进程都在满负荷工作中，却仍然有1万个新来请求，没有连接进程可用，系统陷入到异常状态也是预期之内。</p>
<p><img src="http://i.imgur.com/WxNbgU1.png" alt=""></p>
<p>其实在正常的非高并发的业务场景中，也有类似的情况出现，某个业务请求接口出现问题，响应时间极慢，将整个Web请求响应时间拉得很长，逐渐将Web服务器的可用连接数占满，其他正常的业务请求，无连接进程可用。</p>
<p>更可怕的问题是，是用户的行为特点，系统越是不可用，用户的点击越频繁，恶性循环最终导致“雪崩”（其中一台Web机器挂了，导致流量分散到其他正常工作的机器上，再导致正常的机器也挂，然后恶性循环），将整个Web系统拖垮。</p>
<h3 id="·-重启与过载保护"><a href="#·-重启与过载保护" class="headerlink" title="· 重启与过载保护"></a>· 重启与过载保护</h3><p>如果系统发生“雪崩”，贸然重启服务，是无法解决问题的。最常见的现象是，启动起来后，立刻挂掉。<em>这个时候，最好在入口层将流量拒绝，然后再将重启。如果是redis/memcache这种服务也挂了，重启的时候需要注意“预热”，并且很可能需要比较长的时间。</em></p>
<p>秒杀和抢购的场景，流量往往是超乎我们系统的准备和想象的。这个时候，过载保护是必要的。<em>如果检测到系统满负载状态，拒绝请求也是一种保护措施</em>。在前端设置过滤是最简单的方式，但是，这种做法是被用户“千夫所指”的行为。更合适一点的是，<em>将过载保护设置在CGI入口层，快速将客户的直接请求返回</em>。</p>
<hr>
<h2 id="作弊的手段：进攻与防守"><a href="#作弊的手段：进攻与防守" class="headerlink" title="作弊的手段：进攻与防守"></a>作弊的手段：进攻与防守</h2><p>秒杀和抢购收到了“海量”的请求，实际上里面的水分是很大的。不少用户，为了“抢“到商品，会使用“刷票工具”等类型的辅助工具，帮助他们发送尽可能多的请求到服务器。还有一部分高级用户，制作强大的自动请求脚本。这种做法的理由也很简单，就是在参与秒杀和抢购的请求中，自己的请求数目占比越多，成功的概率越高。</p>
<h3 id="·-同一个账号，一次性发出多个请求"><a href="#·-同一个账号，一次性发出多个请求" class="headerlink" title="· 同一个账号，一次性发出多个请求"></a>· 同一个账号，一次性发出多个请求</h3><p>部分用户通过浏览器的插件或者其他工具，在秒杀开始的时间里，<em>以自己的账号，一次发送上百甚至更多的请求</em>。实际上，这样的用户破坏了秒杀和抢购的公平性。</p>
<p>这种请求在某些没有做数据安全处理的系统里，也可能造成另外一种破坏，导致某些判断条件被绕过。例如一个简单的领取逻辑，先判断用户是否有参与记录，如果没有则领取成功，最后写入到参与记录中。这是个非常简单的逻辑，但是，在高并发的场景下，存在深深的漏洞。<em>多个并发请求通过负载均衡服务器，分配到内网的多台Web服务器，它们首先向存储发送查询请求，然后，在某个请求成功写入参与记录的时间差内，其他的请求获查询到的结果都是“没有参与记录”。</em>这里，就存在逻辑判断被绕过的风险。</p>
<p><img src="http://i.imgur.com/5W0Tj97.png" alt=""></p>
<blockquote>
<p><strong>应对方案</strong>：在程序入口处，一个账号只允许接受1个请求，其他请求过滤。不仅解决了同一个账号，发送N个请求的问题，还保证了后续的逻辑流程的安全。实现方案，可以通过Redis这种内存缓存服务，写入一个标志位（只允许1个请求写成功，结合watch的乐观锁的特性），成功写入的则可以继续参加。或者，自己实现一个服务，将同一个账号的请求放入一个队列中，处理完一个，再处理下一个。</p>
</blockquote>
<p><img src="http://i.imgur.com/KBQCyZd.png" alt=""></p>
<h3 id="·-多个账号，一次性发送多个请求"><a href="#·-多个账号，一次性发送多个请求" class="headerlink" title="· 多个账号，一次性发送多个请求"></a>· 多个账号，一次性发送多个请求</h3><p>很多公司的账号注册功能，在发展早期几乎是没有限制的，很容易就可以注册很多个账号。<em>因此，也导致了出现了一些特殊的工作室，通过编写自动注册脚本，积累了一大批“僵尸账号”，数量庞大，几万甚至几十万的账号不等，专门做各种刷的行为（这就是微博中的“僵尸粉“的来源）。</em>举个例子，例如微博中有转发抽奖的活动，如果我们使用几万个“僵尸号”去混进去转发，这样就可以大大提升我们中奖的概率。这种账号，使用在秒杀和抢购里，也是同一个道理。例如，iPhone官网的抢购，火车票黄牛党。</p>
<blockquote>
<p><strong>应对方案</strong>：这种场景，可以通过检测指定机器IP请求频率就可以解决，如果发现某个IP请求频率很高，可以给它弹出一个验证码或者直接禁止它的请求：</p>
<ol>
<li><p>弹出验证码，最核心的追求，就是分辨出真实用户。因此，大家可能经常发现，网站弹出的验证码，有些是“鬼神乱舞”的样子，有时让我们根本无法看清。他们这样做的原因，其实也是为了让验证码的图片不被轻易识别，因为强大的“自动脚本”可以通过图片识别里面的字符，然后让脚本自动填写验证码。实际上，有一些非常创新的验证码，效果会比较好，例如给你一个简单问题让你回答，或者让你完成某些简单操作（例如百度贴吧的验证码）。</p>
</li>
<li><p>直接禁止IP，实际上是有些粗暴的，因为有些真实用户的网络场景恰好是同一出口IP的，可能会有“误伤“。但是这一个做法简单高效，根据实际场景使用可以获得很好的效果。</p>
</li>
</ol>
</blockquote>
<hr>
<h2 id="高并发下的数据安全"><a href="#高并发下的数据安全" class="headerlink" title="高并发下的数据安全"></a>高并发下的数据安全</h2><p>我们知道在<em>多线程写入同一个文件的时候，会存现“线程安全”的问题</em>（多个线程同时运行同一段代码，如果每次运行结果和单线程运行的结果是一样的，结果和预期相同，就是线程安全的）。<em>如果是MySQL数据库，可以使用它自带的锁机制很好的解决问题，但是，在大规模并发的场景中，是不推荐使用MySQL的</em>。秒杀和抢购的场景中，还有另外一个问题，就是“超发”，如果在这方面控制不慎，会产生发送过多的情况。我们也曾经听说过，某些电商搞抢购活动，买家成功拍下后，商家却不承认订单有效，拒绝发货。这里的问题，也许并不一定是商家奸诈，而是系统技术层面存在超发风险导致的。</p>
<h3 id="·-超发的原因"><a href="#·-超发的原因" class="headerlink" title="· 超发的原因"></a>· 超发的原因</h3><p>假设某个抢购场景中，我们一共只有100个商品，在最后一刻，我们已经消耗了99个商品，仅剩最后一个。这个时候，系统发来多个并发请求，这批请求读取到的商品余量都是99个，然后都通过了这一个余量判断，最终导致超发。</p>
<p><img src="http://i.imgur.com/zcA3IzU.png" alt=""></p>
<p>在上面的这个图中，就导致了并发用户B也“抢购成功”，多让一个人获得了商品。这种场景，在高并发的情况下非常容易出现。</p>
<h3 id="·-悲观锁思路"><a href="#·-悲观锁思路" class="headerlink" title="· 悲观锁思路"></a>· 悲观锁思路</h3><p>解决线程安全的思路很多，可以从“悲观锁”的方向开始讨论。</p>
<blockquote>
<p>悲观锁，也就是在修改数据的时候，采用锁定状态，排斥外部请求的修改。遇到加锁的状态，就必须等待。</p>
</blockquote>
<p><img src="http://i.imgur.com/MOq3OfM.png" alt=""></p>
<p>虽然上述的方案的确解决了线程安全的问题，但是，别忘记，<em>我们的场景是“高并发”。也就是说，会很多这样的修改请求，每个请求都需要等待“锁”，某些线程可能永远都没有机会抢到这个“锁”，这种请求就会死在那里。</em>同时，这种请求会很多，瞬间增大系统的平均响应时间，结果是可用连接数被耗尽，系统陷入异常。</p>
<h3 id="·-FIFO队列思路"><a href="#·-FIFO队列思路" class="headerlink" title="· FIFO队列思路"></a>· FIFO队列思路</h3><p>那好，那么我们稍微修改一下上面的场景，<em>我们直接将请求放入队列中的，采用FIFO（First Input First Output，先进先出），这样的话，我们就不会导致某些请求永远获取不到锁</em>。看到这里，是不是有点强行将多线程变成单线程的感觉哈。</p>
<p><img src="http://i.imgur.com/0DGAueK.png" alt=""></p>
<p>然后，我们现在解决了锁的问题，全部请求采用“先进先出”的队列方式来处理。那么新的问题来了，<em>高并发的场景下，因为请求很多，很可能一瞬间将队列内存“撑爆”，然后系统又陷入到了异常状态。</em>或者设计一个极大的内存队列，也是一种方案，但是，系统处理完一个队列内请求的速度根本无法和疯狂涌入队列中的数目相比。也就是说，队列内的请求会越积累越多，最终Web系统平均响应时候还是会大幅下降，系统还是陷入异常。</p>
<h3 id="·-乐观锁思路"><a href="#·-乐观锁思路" class="headerlink" title="· 乐观锁思路"></a>· 乐观锁思路</h3><p>这个时候，我们就可以讨论一下“乐观锁”的思路了。<em>乐观锁，是相对于“悲观锁”采用更为宽松的加锁机制，大都是采用带版本号（Version）更新。实现就是，这个数据所有请求都有资格去修改，但会获得一个该数据的版本号，只有版本号符合的才能更新成功，其他的返回抢购失败。</em>这样的话，我们就不需要考虑队列的问题，不过，它会增大CPU的计算开销。但是，综合来说，这是一个比较好的解决方案。</p>
<p><img src="http://i.imgur.com/w9ZykRm.png" alt=""></p>
<p>有很多软件和服务都“乐观锁”功能的支持，<em>例如Redis中的watch就是其中之一</em>。通过这个实现，我们保证了数据的安全。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>互联网正在高速发展，使用互联网服务的用户越多，高并发的场景也变得越来越多。电商秒杀和抢购，是两个比较典型的互联网高并发场景。虽然我们解决问题的具体技术方案可能千差万别，但是遇到的挑战却是相似的，因此解决问题的思路也异曲同工。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/rj5CIs9.jpg&quot; style=&quot;max-height: 350px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;互联网正在高速发展，使用互联网服务的用户越多，高并发的场景也变得越来越多。电商秒杀和抢购，是两个比较典型的互联网高并发场景。虽然我们解决问题的具体技术方案可能千差万别，但是遇到的挑战却是相似的，因此解决问题的思路也异曲同工。&lt;br&gt;
    
    </summary>
    
      <category term="System Design" scheme="http://hackjutsu.com/categories/System-Design/"/>
    
    
      <category term="System Design" scheme="http://hackjutsu.com/tags/System-Design/"/>
    
      <category term="Reproduced" scheme="http://hackjutsu.com/tags/Reproduced/"/>
    
  </entry>
  
  <entry>
    <title>Java Concurrency</title>
    <link href="http://hackjutsu.com/2016/01/20/Java%20Concurrency/"/>
    <id>http://hackjutsu.com/2016/01/20/Java Concurrency/</id>
    <published>2016-01-21T04:15:45.000Z</published>
    <updated>2016-02-10T01:48:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/LOBPL1M.jpg" style="max-height: 350px;"></p>
<p>Java is a multi threaded programming language. A multi-threaded program contains two or more parts that can run concurrently and each part can handle different task at the same time making optimal use of the available resources specially when your computer has multiple CPUs.</p>
<p>In this post, we will discover how to write effective and efficient multi threaded program in Java.</p>
<a id="more"></a>
<hr>
<h2 id="Thread-Basics"><a href="#Thread-Basics" class="headerlink" title="Thread Basics"></a>Thread Basics</h2><h3 id="Creating-and-Starting-Threads"><a href="#Creating-and-Starting-Threads" class="headerlink" title="Creating and Starting Threads"></a>Creating and Starting Threads</h3><p>Java Threads have to be instances of <code>java.lang.Thread</code> or instances of subclasses of this class. Creating and starting a thread can be simply done like this:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Thread thread = <span class="keyword">new</span> Thread();</div><div class="line">thread.start(); <span class="comment">// NOT the run() method!!</span></div></pre></td></tr></table></figure></p>
<p>The codes above don’t have any specific codes to run. The thread stops right after it starts. To specify some logic for the new thread, we either subclass the <code>Thread</code> or pass an implementation of <code>java.lang.Runnable</code> to the <code>Thread</code>‘s constructor.</p>
<h4 id="Subclassing-Thread"><a href="#Subclassing-Thread" class="headerlink" title="Subclassing Thread"></a>Subclassing Thread</h4><p>Subclass the <code>Thread</code> and override its <code>run()</code> method.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuteThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"CuteThread is running~"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>To start the thread:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CuteThread cuteThread = <span class="keyword">new</span> CuteThread();</div><div class="line">cuteThread.start();</div></pre></td></tr></table></figure></p>
<h4 id="Implementing-Runnable"><a href="#Implementing-Runnable" class="headerlink" title="Implementing Runnable"></a>Implementing Runnable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">       System.out.println(<span class="string">"MyRunnable running"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>Implementing <code>Runnable</code> is the <a href="http://stackoverflow.com/questions/541487/implements-runnable-vs-extends-thread" target="_blank" rel="external">preferred way to run</a> specific codes on a new thread, since we are not specializing the thread’s interface.</p>
<h4 id="Get-the-Current-Thread"><a href="#Get-the-Current-Thread" class="headerlink" title="Get the Current Thread"></a>Get the Current Thread</h4><p><code>Thread.currentThread()</code> returns a reference to the <code>Thread</code> instance executing the <code>currentThread()</code>.</p>
<h4 id="Name-of-a-Thread"><a href="#Name-of-a-Thread" class="headerlink" title="Name of a Thread"></a>Name of a Thread</h4><p>We can assign a name to a Java Thread by passing it to the constructor. We can retrieve the name by calling <code>getName()</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</div><div class="line">Thread thread = <span class="keyword">new</span> Thread(runnable, <span class="string">"New Thread"</span>);</div><div class="line"></div><div class="line">thread.start();</div><div class="line">System.out.println(thread.getName());</div></pre></td></tr></table></figure></p>
<h4 id="Pausing-Execution-with-Sleep"><a href="#Pausing-Execution-with-Sleep" class="headerlink" title="Pausing Execution with Sleep"></a>Pausing Execution with Sleep</h4><p><code>Thread.sleep()</code> causes the <strong>current</strong> thread to suspend execution for a specified period.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pause for 4 seconds</span></div><div class="line">Thread.sleep(<span class="number">4000</span>);</div></pre></td></tr></table></figure></p>
<h3 id="Joining-a-Thread"><a href="#Joining-a-Thread" class="headerlink" title="Joining a Thread"></a>Joining a Thread</h3><p>If <code>join()</code> is called on a <code>Thread</code> instance, the currently running thread will block until the <code>Thread</code> instance has finished executing.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The current thread will be blocked until threadA finishes</span></div><div class="line">threadA.join();</div><div class="line"><span class="comment">// The current thread waits at most 2000ms</span></div><div class="line">threadB.join(<span class="number">2000</span>);</div><div class="line"><span class="comment">// The current thread waits at most 2000ms + 100ns</span></div><div class="line">threadC.join(<span class="number">2000</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure></p>
<h3 id="Yielding-a-Thread"><a href="#Yielding-a-Thread" class="headerlink" title="Yielding a Thread"></a>Yielding a Thread</h3><p>According to the Java documentation, <code>yield()</code> is:</p>
<blockquote>
<p>a hint to the scheduler that the current thread is willing to yield its current use of a processor.</p>
</blockquote>
<p>Let’s use the following snippet as an example.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Thread myThread = <span class="keyword">new</span> Thread() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Hello from new thread"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        myThread.start();</div><div class="line">        Thread.yield();</div><div class="line">        System.out.println(<span class="string">"Hello from main thread"</span>);</div><div class="line">        myThread.join();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Without the call to <code>yield()</code>, the startup overhead of the new thread would mean that the main thread would almost certainly get to its <code>println()</code> first, although it is not guaranteed to be the case.</p>
<h3 id="Java-Volatile-Keyword"><a href="#Java-Volatile-Keyword" class="headerlink" title="Java Volatile Keyword"></a>Java Volatile Keyword</h3><p>Let’s look at an example. In the following codes, we start <em>thread_B</em> from <em>thread_A</em>. Then we send a stop signal from <em>thread_A</em> to <em>thread_B</em> to stop the latter thread.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Processor</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>; <span class="comment">// Pitfall!!</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(running) &#123;</div><div class="line">            System.out.println(<span class="string">"Hello"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">100</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        running = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicSync</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// Start thread_B</span></div><div class="line">        Processor proc = <span class="keyword">new</span> Processor();</div><div class="line">        proc.start();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Please enter return key to stop..."</span>);</div><div class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        scanner.nextLine();</div><div class="line"></div><div class="line">        <span class="comment">// Send shutdown signal from thread_A to thread_B</span></div><div class="line">        proc.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The program looks fine at the first glance, but actually it could fail to stop the <em>thread_B</em> depending on how the compiler optimizes the program. In some compiler, <code>while(running){...}</code> in <code>Processor</code> could be optimized as <code>while(true){...}</code>. The compiler has no idea <code>running</code> would be changed by other thread, and it optimizes <code>running</code> to <code>true</code> according to its knowledge.</p>
<p>To avoid this, we need to declare the <code>running</code> as <code>volatile</code>, which means the <code>running</code>variable could be changed by the codes outside and the compiler should not optimize it.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="Thread-pools-with-the-Executor-Framework"><a href="#Thread-pools-with-the-Executor-Framework" class="headerlink" title="Thread pools with the Executor Framework"></a>Thread pools with the Executor Framework</h2><h3 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h3><p><strong>Executors framework</strong> is used to run the <code>Runnable</code> objects without creating new threads every time and mostly re-using the already created threads. There is a <strong>thread pool</strong> managing a pool of worker thread. Each submittd task to the thread pool will enters a queue waiting to be executed.</p>
<blockquote>
<p>A thread pool can be described as a collection of <em>Runnable</em> objects (work queue) and a connections of running threads. These threads are constantly running and are checking the work query for new work. If there is new work to be done they execute this Runnable. The Thread class itself provides a method, e.g. <em>execute(Runnable r)</em> to add a new <em>Runnable</em> object to the work queue. <a href="http://www.vogella.com/tutorials/JavaConcurrency/article.html#threadpools" target="_blank" rel="external">– By vogella Java Tutorial</a></p>
</blockquote>
<p>A thread pool is represented by an instance of the class <code>ExecutorService</code>. With the <code>ExecutorService</code> instance, we can submit tasks to be executed in the future.</p>
<p><code>Executors</code> provide utilities and factory methods for <code>ExecutorService</code>, for example <code>Executors.newFixedThreadPool(int n)</code> will create n worker threads.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">   pool.submit(<span class="keyword">new</span> MyRunnable());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In the codes above 10 <code>Runnable</code>instances will be submitted to a thread pool with the size 4. We are responsible to shutdown the thread pool in order to terminate all the threads, or the JVM will risk not to shutdown.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This will make the executor accept no new threads</span></div><div class="line"><span class="comment">// and finish all existing threads in the queue</span></div><div class="line">pool.shutdown();</div><div class="line"><span class="comment">// Wait until all threads are finish</span></div><div class="line">pool.awaitTermination();</div></pre></td></tr></table></figure></p>
<p>We can also force the shutdown of the pool using <code>shutdownNow()</code>, with that the currently running tasks will be interrupted and the tasks not started will be returned.</p>
<h3 id="Futures-and-Callables"><a href="#Futures-and-Callables" class="headerlink" title="Futures and Callables"></a>Futures and Callables</h3><p>The Executor framework works with a <code>Runnable</code> instance as shown above. However, <code>Runnable</code> cannot return a result to the caller. To get the computed result, Java provides the <code>Callable</code> interface.</p>
<p>The <code>Callable</code> object uses generics to define the return value.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</div><div class="line">            sum += i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>When we submit a <code>Callable</code> instance to the thread pool, we will get a <code>Future</code> object,  which exposes methods for us to monitor the progress that the task being executed.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ExecutorService executor = Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line">Future&lt;Integer&gt; future = executor.submit(<span class="keyword">new</span> MyCallable());</div><div class="line"><span class="keyword">int</span> result = future.get();</div></pre></td></tr></table></figure></p>
<p>The <code>Future</code>‘s <code>get()</code>will waits if necessary for the computation to complete, and then retrieves the result. Here is a list of methods provided by <code>Future</code>:</p>
<ul>
<li><strong><em>boolean cancel(boolean mayInterruptIfRunning)</em></strong><ul>
<li>Attempts to cancel execution of this task.</li>
</ul>
</li>
<li><strong><em>V get()</em></strong><ul>
<li>Waits if necessary for the computation to complete, and then retrieves its result.</li>
</ul>
</li>
<li><strong><em>V get(long timeout, TimeUnit unit)</em></strong><ul>
<li>Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.</li>
</ul>
</li>
<li><strong><em>boolean isCancelled()</em></strong><ul>
<li>Returns true if this task was cancelled before it completed normally.</li>
</ul>
</li>
<li><strong><em>boolean isDone()</em></strong><ul>
<li>Returns true if this task completed.</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>Note:</strong> Check out the Oracle documentations for more about <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html" target="_blank" rel="external">Callable</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html" target="_blank" rel="external">Future</a>.</p>
</blockquote>
<h3 id="Java-8’s-CompletableFuture"><a href="#Java-8’s-CompletableFuture" class="headerlink" title="Java 8’s CompletableFuture"></a>Java 8’s CompletableFuture</h3><p><code>CompletableFuture</code> extends the functionality of the <code>Future</code> interface with the possibility to notify the caller once a task is done by utilizing function-style callbacks.</p>
<p>Tutorials about <code>CompletableFuture</code> can be found here:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" target="_blank" rel="external">Java Documentation</a></li>
<li><a href="http://www.infoq.com/articles/Functional-Style-Callbacks-Using-CompletableFuture" target="_blank" rel="external">Functional-Style Callbacks Using Java 8’s CompletableFuture</a></li>
<li><a href="http://www.javacodegeeks.com/2013/05/java-8-completablefuture-in-action.html" target="_blank" rel="external">Java 8: CompletableFuture in action</a></li>
</ul>
<hr>
<h2 id="Synchornized-Keyword"><a href="#Synchornized-Keyword" class="headerlink" title="Synchornized Keyword"></a>Synchornized Keyword</h2><p>The Java <code>synchronized</code>keyword serves as Java’s intrinsic locks. It marks a Java block or method as <code>synchronized</code> to avoid race conditions. These synchronized blocks or methods only allow one thread executing their codes at one time. As <a href="http://tutorials.jenkov.com/java-concurrency/synchronized.html" target="_blank" rel="external">summarized by Jakob Jenkov</a> , the <code>synchronized</code> keyword can be used to mark four different types of blocks:</p>
<ul>
<li>Instance methods</li>
<li>Static methods</li>
<li>Code blocks inside instance methods</li>
<li>Code blocks inside static methods</li>
</ul>
<h3 id="Synchronized-Instance-Methods"><a href="#Synchronized-Instance-Methods" class="headerlink" title="Synchronized Instance Methods"></a>Synchronized Instance Methods</h3><p>A synchronized instance method in Java is synchronized on the instance (object) owning the method.  Only one thread can execute the synchronized method <strong>on the same instance</strong> at one time.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.count += value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Synchronized-Static-Methods"><a href="#Synchronized-Static-Methods" class="headerlink" title="Synchronized Static Methods"></a>Synchronized Static Methods</h3><p>Only one thread can execute inside a static synchronized method <strong>in the same class</strong>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</div><div class="line">     count += value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Note that declaring a method as synchronized is just syntactic sugar for surround the method’s body with the following:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">    &lt;&lt;method body&gt;&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Synchronized-Blocks-in-Instance-Methods"><a href="#Synchronized-Blocks-in-Instance-Methods" class="headerlink" title="Synchronized Blocks in Instance Methods"></a>Synchronized Blocks in Instance Methods</h3><p>Sometimes, we don’t need to synchronize the whole method, insteads, we can only synchronize a block of codes.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</div><div class="line">    <span class="comment">// Some codes before the synchronized block</span></div><div class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</div><div class="line">        <span class="keyword">this</span>.count += value;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Some codes after the synchronized block</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The object taken in the parentheses by the synchronized construct is called a monitor object. Only one thread can execute inside a Java code block synchronized on the same monitor object. In the codes below, the synchroinzed codes take <code>this</code> as the monitor object.</p>
<h3 id="Synchronized-Blocks-in-Static-Methods"><a href="#Synchronized-Blocks-in-Static-Methods" class="headerlink" title="Synchronized Blocks in Static Methods"></a>Synchronized Blocks in Static Methods</h3><p>Only one thread can execute inside the synchronized block <strong>in the same class</strong> (<code>MyClass.class</code>in the codes below).<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg1, String msg2)</span></span>&#123;</div><div class="line">	    <span class="comment">// Some codes before the synchronized block</span></div><div class="line">        <span class="keyword">synchronized</span>(MyClass.class)&#123;</div><div class="line">            System.out.println(<span class="string">"Hello World!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Some codes after the synchronized block</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Thread-Signaling"><a href="#Thread-Signaling" class="headerlink" title="Thread Signaling"></a>Thread Signaling</h2><p>As the name suggested, thread signaling should enable threads to send signals to each other. At the same time, it should also allow threads to wait signals from other threads.</p>
<h3 id="Busy-Waiting"><a href="#Busy-Waiting" class="headerlink" title="Busy Waiting"></a>Busy Waiting</h3><p>The most intuitive way for thread signaling is let threads send signals to and retrieve signals from a shared object.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedSignal</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> mShouldContinue = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">shouldContinue</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> mShouldContinue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setShouldContinue</span><span class="params">(<span class="keyword">boolean</span> <span class="keyword">continue</span>)</span></span>&#123;</div><div class="line">        mShouldContinue = <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Thread A could do a busy waiting for Thread B to signal the <code>SharedSignal</code> object.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> SharedSignal signal = <span class="keyword">new</span> SharedSignal();</div><div class="line"><span class="comment">// Some codes here</span></div><div class="line"></div><div class="line"><span class="keyword">while</span>(!signal.shouldContinue()) &#123;</div><div class="line"><span class="comment">// busy waiting</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="wait-notify-and-notifyAll"><a href="#wait-notify-and-notifyAll" class="headerlink" title="wait(), notify() and notifyAll()"></a>wait(), notify() and notifyAll()</h3><p>The busy waiting consumes the CPU while waiting, which is not very efficient. Java <code>Object</code> has a built-in mechanism for a more smarter wait. The thread will sleep while waiting until some other thread sends a signal to wait it up.</p>
<p><code>Object</code> defines three methods <code>wait()</code>, <code>notify()</code> and <code>notifyAll()</code> to facilitate this smart wait.</p>
<p>A thread that calls <code>wait()</code> on any object becomes inactive until another thread calls <code>notify()</code> on that object. In order to call either <code>wait()</code> or notify the calling thread must first obtain the lock on that object. In other words, the calling thread must call <code>wait()</code> or <code>notify()</code> from inside a <code>synchronized</code> block.</p>
<p>Once a thread calls <code>wait()</code> it <strong>releases</strong> the lock it holds on the monitor object. Once a thread is awakened it cannot exit the <code>wait()</code> call until the thread calling <code>notify()</code> has left its <code>synchronized</code> block.  If multiple threads are awakened using <code>notifyAll()</code> only one awakened thread at a time can exit the <code>wait()</code> method, since each thread must obtain the lock on the monitor object in turn before exiting <code>wait()</code>.</p>
<p><a href="http://stackoverflow.com/a/2536999/3697757" target="_blank" rel="external">Here</a> is a good example illustrating this mechanism:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHouse</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> pizzaArrived = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatPizza</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">while</span>(!pizzaArrived) &#123; <span class="comment">// Never do if(!pizzaArrived)</span></div><div class="line">                wait();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"yumyum.."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pizzaGuy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">             <span class="keyword">this</span>.pizzaArrived = <span class="keyword">true</span>;</div><div class="line">             notifyAll();</div><div class="line">             <span class="comment">// Stick with notifyAll() until you know what you are doing</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The post lists some important points:</p>
<ul>
<li>Always use <code>while(!pizzaArrized)</code> insteads of <code>if(!pizzaArrived)</code> to avoid the suspicious wake up.</li>
<li>We must hold the lock (synchronized) before invoking wait/nofity. Threads also have to acquire lock before waking.</li>
<li>Try to avoid acquiring any lock within your synchronized block and strive to not invoke alien methods (methods you don’t know for sure what they are doing). If you have to, make sure to take measures to avoid deadlocks.</li>
<li>Be careful with notify(). Stick with <code>notifyAll()</code> until you know what you are doing.</li>
<li>Last, but not least, read <a href="http://www.amazon.com/gp/product/0321349601?ie=UTF8&amp;tag=none0b69&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321349601" target="_blank" rel="external">Java Concurrency in Practice</a>!</li>
</ul>
<blockquote>
<p> <strong>Note:</strong>  Don’t call <code>wait()</code> on constant Strings or global objects!!  The JVM/Compiler internally translates constant strings into the same object.</p>
</blockquote>
<hr>
<h2 id="Re-entrant-Locks-and-Condition-Variables"><a href="#Re-entrant-Locks-and-Condition-Variables" class="headerlink" title="Re-entrant Locks and Condition Variables"></a>Re-entrant Locks and Condition Variables</h2><p>In Java 5.0, a new addition called <code>ReentrantLock</code> was made to enhance intrinsic locking capabilities. Prior to this,  <code>synchronized</code> and <code>volatile</code> were the means for achieving concurrency.</p>
<h3 id="Re-entrant-Locks-and-synchroinzed"><a href="#Re-entrant-Locks-and-synchroinzed" class="headerlink" title="Re-entrant Locks and synchroinzed"></a>Re-entrant Locks and synchroinzed</h3><p>The <code>synchronized</code> uses intrinsic locks or monitors, <a href="https://dzone.com/articles/what-are-reentrant-locks" target="_blank" rel="external">this article</a> gives insightful comparation between the intrinsic locking mechanism and the Re-eantrant lock mechanism.  In short……</p>
<blockquote>
<p>The main difference between <code>synchronized</code> and <code>ReentrantLock</code> is ability to trying for lock interruptibly, and with timeout.</p>
</blockquote>
<p><code>ReentrantLock</code> is a concrete implementation of <code>Lock</code> interface.  It is mutual exclusive lock, similar to implicit locking provided by <code>synchronized</code> keyword in Java, with extended feature like <strong>fairness</strong>, which can be used to provide lock to longest waiting thread. Lock is acquired by <code>lock()</code> method and held by Thread until a call to <code>unlock()</code> method. <strong>Fairness</strong>  parameter is provided while creating instance of <code>ReentrantLock</code> in constructor. <code>ReentrantLock</code> provides same visibility and ordering guarantee, provided by implicitly locking, which means, <code>unlock()</code> happens before another thread get <code>lock()</code>.</p>
<h3 id="Re-entrant-Locks-Example"><a href="#Re-entrant-Locks-Example" class="headerlink" title="Re-entrant Locks Example"></a>Re-entrant Locks Example</h3><p>Here is a example using Re-entrant lock to increment the counter.  <a href="http://javarevisited.blogspot.com/2013/03/reentrantlock-example-in-java-synchronized-difference-vs-lock.html" target="_blank" rel="external">Check out the original post here :)</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">//Locking using Lock and ReentrantLock</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(</div><div class="line">                    Thread.currentThread().getName() + <span class="string">" gets Count: "</span> + count);</div><div class="line">            <span class="keyword">return</span> count++;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ReentrantLockTest counter = <span class="keyword">new</span> ReentrantLockTest();</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">while</span> (counter.getCount() &lt;= <span class="number">6</span>) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">100</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">                        ex.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">while</span> (counter.getCount() &lt;= <span class="number">6</span>) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">100</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">                        ex.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Note that since the lock is not automatically released when the method exits, you should wrap the <code>lock()</code> and the <code>unlock()</code> methods in a <code>try/finally</code> clause.</p>
<h3 id="Conditional-Variable"><a href="#Conditional-Variable" class="headerlink" title="Conditional Variable"></a>Conditional Variable</h3><p>The <code>Condition</code> interface factors out the <code>java.lang.Object</code> monitor methods <code>wait()/notify()/notifyAll()</code> into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary <code>Lock</code> implementations. Where <code>Lock</code> replaces <code>synchronized</code> methods and statements, <code>Condition</code> replaces <code>Object</code> monitor methods.</p>
<blockquote>
<p><strong>Note:</strong> The main difference between <em>synchroinzed/wait/notify</em> and <em>Lock</em> is <em>Lock</em> API isn’t block bound and we can have many groups of <em>wait/notify</em> by using many <em>Condition</em> instances.</p>
</blockquote>
<p>Here is a sample given by the Java document:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundedBuffer</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">final</span> Condition notFull = lock.newCondition();</div><div class="line">    <span class="keyword">final</span> Condition notEmpty = lock.newCondition();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">new</span> Object[<span class="number">100</span>];</div><div class="line">    <span class="keyword">int</span> putptr, takeptr, count;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object x)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (count == items.length)</div><div class="line">                notFull.await();</div><div class="line">            items[putptr] = x;</div><div class="line">            <span class="keyword">if</span> (++putptr == items.length)</div><div class="line">                putptr = <span class="number">0</span>;</div><div class="line">            ++count;</div><div class="line">            notEmpty.signal();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>)</div><div class="line">                notEmpty.await();</div><div class="line">            Object x = items[takeptr];</div><div class="line">            <span class="keyword">if</span> (++takeptr == items.length)</div><div class="line">                takeptr = <span class="number">0</span>;</div><div class="line">            --count;</div><div class="line">            notFull.signal();</div><div class="line">            <span class="keyword">return</span> x;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="Semaphores"><a href="#Semaphores" class="headerlink" title="Semaphores"></a>Semaphores</h2><blockquote>
<p><strong>Note:</strong> <a href="http://jakob.jenkov.com/" target="_blank" rel="external">Jakob Jenkov</a> gives a good <a href="http://tutorials.jenkov.com/java-util-concurrent/semaphore.html" target="_blank" rel="external">tutorial</a> on the <em>Semaphore</em>.  I would like to adapt his tutorial here. For more information, please refer to <a href="http://tutorials.jenkov.com/java-util-concurrent/semaphore.html" target="_blank" rel="external">the original post</a>.</p>
</blockquote>
<p>The <code>java.util.concurrent.Semaphore</code> class is a counting semaphore. That means that it has two main methods:</p>
<ul>
<li>acquire()</li>
<li>release()</li>
</ul>
<p>The counting semaphore is initialized with a given number of “permits”. For each call to <code>acquire()</code> a permit is taken by the calling thread. For each call to <code>release()</code> a permit is returned to the semaphore. Thus, at most N threads can pass the <code>acquire()</code> method without any <code>release()</code> calls, where N is the number of permits the semaphore was initialized with. The permits are just a simple counter.</p>
<h3 id="Semaphore-Usage"><a href="#Semaphore-Usage" class="headerlink" title="Semaphore Usage"></a>Semaphore Usage</h3><p>As semaphore typically has two uses:</p>
<ul>
<li>To guard a critical section against entry by more than N threads at a time.</li>
<li>To send signals between two threads.</li>
</ul>
<h4 id="Guarding-Critical-Sections"><a href="#Guarding-Critical-Sections" class="headerlink" title="Guarding Critical Sections"></a>Guarding Critical Sections</h4><p>If we use a semaphore to guard a critical section, the thread trying to enter the critical section will typically first try to acquire a permit, enter the critical section, and then release the permit again after. Like this:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">//critical section</span></div><div class="line">semaphore.acquire();</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">semaphore.release();</div></pre></td></tr></table></figure></p>
<h4 id="Sending-Signals-Between-Threads"><a href="#Sending-Signals-Between-Threads" class="headerlink" title="Sending Signals Between Threads"></a>Sending Signals Between Threads</h4><p>If we use a semaphore to send signals between threads, then we would typically have one thread call the <code>acquire()</code> method, and the other thread to call the <code>release()</code> method.</p>
<p>If no permits are available, the <code>acquire()</code> call will block until a permit is released by another thread. Similarly, a <code>release()</code> calls is blocked if no more permits can be released into this semaphore.</p>
<h3 id="Fairness"><a href="#Fairness" class="headerlink" title="Fairness"></a>Fairness</h3><p>No guarantees are made about fairness of the threads acquiring permits from the Semaphore. That is, there is no guarantee that the first thread to call acquire() is also the first thread to obtain a permit.</p>
<p>To enforce fairness, the <code>Semaphore</code> class has a constructor that takes a boolean telling if the semaphore should enforce fairness.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1</span>, <span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note:</strong> Enforcing fairness comes at a performance / concurrency penalty, so don’t enable it unless you need it.</p>
</blockquote>
<hr>
<h2 id="Blocking-Queue"><a href="#Blocking-Queue" class="headerlink" title="Blocking Queue"></a>Blocking Queue</h2><p><a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingQueue.html" target="_blank" rel="external">BlockingQueue</a> is a queue interface which is thread safe to insert or retrieve elements from it, which is a nice candidate for concurrent development. Here is an <a href="http://examples.javacodegeeks.com/core-java/util/concurrent/java-blockingqueue-example/" target="_blank" rel="external">example</a> about utilizing BlockingQueue for a Producer-Consumer pattern.</p>
<table>
<thead>
<tr>
<th style="text-align:center">Methods</th>
<th style="text-align:center">Throws Exception</th>
<th style="text-align:center">Special Value</th>
<th style="text-align:center">Blocks</th>
<th style="text-align:center">Times Out</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Insert</td>
<td style="text-align:center">add(o)</td>
<td style="text-align:center">offer(o)</td>
<td style="text-align:center">put(o)</td>
<td style="text-align:center">offer(o, timeout, timeunit)</td>
</tr>
<tr>
<td style="text-align:center">Remove</td>
<td style="text-align:center">remove(o)</td>
<td style="text-align:center">poll(o)</td>
<td style="text-align:center">take()</td>
<td style="text-align:center">poll(timeout, timeunit)</td>
</tr>
<tr>
<td style="text-align:center">Examine</td>
<td style="text-align:center">element()</td>
<td style="text-align:center">peek()</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>Throws Exception</strong><br>If the attempted operation is not possible immediately, an exception is thrown.</li>
<li><strong>Special Value</strong><br>If the attempted operation is not possible immediately, a special value is returned (often true / false).</li>
<li><strong>Blocks</strong><br>If the attempted operation is not possible immedidately, the method call blocks until it is.</li>
<li><strong>Times Out</strong><br>If the attempted operation is not possible immedidately, the method call blocks until it is, but waits no longer than the given timeout. Returns a special value telling whether the operation succeeded or not (typically true / false).</li>
</ul>
<hr>
<h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p><code>ConcurrentHashMap</code> performs better than  <code>Hashtable</code> or <code>synchronized Map</code> because it only locks a <strong>portion</strong> of Map.</p>
<p>In the book Clean Code, the author <a href="http://stackoverflow.com/questions/6692008/java-concurrenthashmap-is-better-than-hashmap-performance-wise" target="_blank" rel="external">claims the ConcurrentHashMap performs better than HashMap in nearly all situations.</a></p>
<blockquote>
<p>When Java was young Doug Lea wrote the seminal book <em>Concurrent Programming in Java</em>. Along with the book he developed several thread-safe collection, which later became part of the JDK in the  <em>java.util.concurrent</em> package. The collections in that package are safe for multithreaded situations and they perform well. <strong>In fact, the  ConcurrentHashMap implementation performs better than HashMap in nearly all situations.</strong> It also allows for simultaneous concurrent reads and writes, and it has methods supporting common composite operations that are otherwise not thread safe. If Java 5 is the deployment environment, start with  <em>ConcurrentHashMap</em>.</p>
</blockquote>
<p>Check out <a href="http://javarevisited.blogspot.com/2013/02/concurrenthashmap-in-java-example-tutorial-working.html" target="_blank" rel="external">here</a> and <a href="http://javarevisited.blogspot.com/2011/04/difference-between-concurrenthashmap.html" target="_blank" rel="external">here</a> for more information.</p>
<hr>
<h2 id="Atomic-Class"><a href="#Atomic-Class" class="headerlink" title="Atomic Class"></a>Atomic Class</h2><p>Here is a small toolkit of classes that support lock-free thread-safe programming on single variables. Check out this <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html" target="_blank" rel="external">link</a> for more atomic classes.</p>
<table>
<thead>
<tr>
<th style="text-align:center">Class</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicBoolean.html" target="_blank" rel="external">AtomicBoolean</a></td>
<td style="text-align:center">A boolean value that may be updated atomically.</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicInteger.html" target="_blank" rel="external">AtomicInteger</a></td>
<td style="text-align:center">A int value that may be updated atomically.</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html" target="_blank" rel="external">AtomicIntegerArray</a></td>
<td style="text-align:center">An int array in which elements may be updated atomically.</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicLong.html" target="_blank" rel="external">AtomicLong</a></td>
<td style="text-align:center">A long value that may be updated atomically.</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicLongArray.html" target="_blank" rel="external">AtomicLongArray</a></td>
<td style="text-align:center">A long array in which elements may be updated atomically.</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://tutorials.jenkov.com/java-concurrency/references.html" target="_blank" rel="external">Java Concurrency References</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LOBPL1M.jpg&quot; style=&quot;max-height: 350px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Java is a multi threaded programming language. A multi-threaded program contains two or more parts that can run concurrently and each part can handle different task at the same time making optimal use of the available resources specially when your computer has multiple CPUs.&lt;/p&gt;
&lt;p&gt;In this post, we will discover how to write effective and efficient multi threaded program in Java.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://hackjutsu.com/tags/Java/"/>
    
      <category term="Concurrency" scheme="http://hackjutsu.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Autoboxing and Unboxing</title>
    <link href="http://hackjutsu.com/2016/01/12/Autoboxing%20and%20Unboxing/"/>
    <id>http://hackjutsu.com/2016/01/12/Autoboxing and Unboxing/</id>
    <published>2016-01-13T02:00:01.000Z</published>
    <updated>2016-01-15T01:47:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/tuNnNbs.png" style="max-height: 280px;"><br>Autoboxing and unboxing is introduced in Java 1.5 to automatically change the primitive type into the wrapper class and vice verse. With this feature, we can use primitives(<code>int</code>, <code>double</code>, <code>float</code>…) and wrapper classes(<code>Integer</code>, <code>Double</code>, <code>Float</code>…) in many places interchangeably.<br><a id="more"></a></p>
<p>The following table lists the primitive types and their corresponding wrapper classes, which are used by the Java compiler for autoboxing and unboxing:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Primitive type</th>
<th style="text-align:center">Wrapper class</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">boolean</td>
<td style="text-align:center">Boolean</td>
</tr>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">Byte</td>
</tr>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">Character</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">Float</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">Integer</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">Long</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">Short</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">Double</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="Autoboxing-and-Unboxing-Examples"><a href="#Autoboxing-and-Unboxing-Examples" class="headerlink" title="Autoboxing and Unboxing Examples"></a>Autoboxing and Unboxing Examples</h2><h3 id="Autoboxing"><a href="#Autoboxing" class="headerlink" title="Autoboxing"></a>Autoboxing</h3><p>Autoboxing is the automatic conversion that the Java compiler makes to change primitive types to their corresponding object wrapper classes. Here is an example for autoboxing.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">50</span>; i += <span class="number">2</span>) &#123;</div><div class="line">    li.add(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>According to the <a href="https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html" target="_blank" rel="external">Java Docs</a>, The Java compiler applies autoboxing when a primitive value is:</p>
<ul>
<li>Passed as a parameter to a method that expects an object of the corresponding wrapper class.</li>
<li>Assigned to a variable of the corresponding wrapper class.</li>
</ul>
<h3 id="Unboxing"><a href="#Unboxing" class="headerlink" title="Unboxing"></a>Unboxing</h3><p>Unboxing is the opposite process of autoboxing.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer myWrapperInt = <span class="number">13</span>;</div><div class="line"><span class="keyword">int</span> myPrimitive = myWrapperInt;</div></pre></td></tr></table></figure></p>
<p>The Java compiler applies unboxing when an object of a wrapper class is:</p>
<ul>
<li>Passed as a parameter to a method that expects a value of the corresponding primitive type.</li>
<li>Assigned to a variable of the corresponding primitive type.</li>
</ul>
<hr>
<h2 id="Caveats"><a href="#Caveats" class="headerlink" title="Caveats"></a>Caveats</h2><p>Autoboxing and unboxing lets developers write cleaner code, making it easier to read, however there are some caveats we need to understand before utilizing them in production code.</p>
<h3 id="Unnecessary-Object-creation-due-to-Autoboxing"><a href="#Unnecessary-Object-creation-due-to-Autoboxing" class="headerlink" title="Unnecessary Object creation due to Autoboxing"></a>Unnecessary Object creation due to Autoboxing</h3><p>As shown in the example from <a href="http://javarevisited.blogspot.com/2012/07/auto-boxing-and-unboxing-in-java-be.html" target="_blank" rel="external">Javarevisited</a>,  autoboxing could throw away object which gets created if autoboxing occurs in a loop. This could potentially slow down the system with frequent garbage collection.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Integer sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1000</span>; i&lt;<span class="number">5000</span>; i++)&#123;</div><div class="line">    sum+=i;</div><div class="line">    <span class="comment">// Integer sum = new Integer(sum.intValue() + i);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Refer to <a href="http://javarevisited.blogspot.com/2012/07/auto-boxing-and-unboxing-in-java-be.html" target="_blank" rel="external">Javarevisited</a> for more details.</p>
<h3 id="Complicated-method-overloading"><a href="#Complicated-method-overloading" class="headerlink" title="Complicated method overloading"></a>Complicated method overloading</h3><p>As discussed in  <a href="http://javarevisited.blogspot.com/2012/07/auto-boxing-and-unboxing-in-java-be.html" target="_blank" rel="external">Javarevisited</a>, we need method overloading to distinguish <code>value(int)</code> and <code>value(Integer)</code> since autoboxing/unboxing will potentially introduce subtle bugs if only either method exists.</p>
<p>For example, <code>ArrayList.remove()</code> is overloaded by <code>remove(index)</code> and <code>remove(Object)</code>, so that autoboxing/unboxing won’t occur to confuse us by mixing removing object by index and removing object itself (e.g. especially when <code>Integer</code> is the object).</p>
<h3 id="Tricky-“-”-operator"><a href="#Tricky-“-”-operator" class="headerlink" title="Tricky “==” operator"></a>Tricky “==” operator</h3><p>I would like to borrow the example again from <a href="http://javarevisited.blogspot.com/2012/07/auto-boxing-and-unboxing-in-java-be.html" target="_blank" rel="external">Javarevisited</a>. More details can be found on the original post.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoboxingTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// Example 1: == comparison pure primitive – no autoboxing</span></div><div class="line">        <span class="keyword">int</span> i1 = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> i2 = <span class="number">1</span>;</div><div class="line">        System.out.println(<span class="string">"i1==i2 : "</span> + (i1 == i2)); <span class="comment">// true</span></div><div class="line"></div><div class="line">        <span class="comment">// Example 2: equality operator mixing object and primitive</span></div><div class="line">        Integer num1 = <span class="number">1</span>; <span class="comment">// autoboxing</span></div><div class="line">        <span class="keyword">int</span> num2 = <span class="number">1</span>;</div><div class="line">        System.out.println(<span class="string">"num1 == num2 : "</span> + (num1 == num2)); <span class="comment">// true</span></div><div class="line"></div><div class="line">        <span class="comment">// Example 3: special case - arises due to autoboxing in Java</span></div><div class="line">        Integer obj1 = <span class="number">1</span>; <span class="comment">// autoboxing will call Integer.valueOf()</span></div><div class="line">        Integer obj2 = <span class="number">1</span>; <span class="comment">// same call to Integer.valueOf() will return same</span></div><div class="line">                          <span class="comment">// cached Object</span></div><div class="line">        System.out.println(<span class="string">"obj1 == obj2 : "</span> + (obj1 == obj2)); <span class="comment">// true</span></div><div class="line"></div><div class="line">        <span class="comment">// Example 4: equality operator - pure object comparison</span></div><div class="line">        Integer one = <span class="keyword">new</span> Integer(<span class="number">1</span>); <span class="comment">// no autoboxing</span></div><div class="line">        Integer anotherOne = <span class="keyword">new</span> Integer(<span class="number">1</span>);</div><div class="line">        System.out.println(</div><div class="line">                <span class="string">"one == anotherOne : "</span> + (one == anotherOne)); <span class="comment">// false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Here is the output.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">i1==i2 : <span class="literal">true</span></div><div class="line">num1 == num2 : <span class="literal">true</span></div><div class="line">obj1 == obj2 : <span class="literal">true</span></div><div class="line">one == anotherOne : <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>I would like to put the insightful explanation from the <a href="http://javarevisited.blogspot.com/2012/07/auto-boxing-and-unboxing-in-java-be.html" target="_blank" rel="external">original post</a> here.</p>
<blockquote>
<p>In first example both argument of == operator is primitive int type so no autoboxing occurs and since <code>1==1</code> it prints true.</p>
<p>While in second example during assignment to num1, autoboxing occurs which converts primitive 1 into <code>Integer(1)</code> and when we compare <code>num1==num2</code> unboxing occurs and <code>Integer(1)</code> is converted back to 1 by calling Integer.intValue() method  and since <code>1==1</code> result is true.</p>
<p>In Third example which is a corner case in autoboxing, both Integer object are initialized automatically due to autoboxing and since <code>Integer.valueOf()</code> method is used to convert int to Integer and it caches object ranges from -128 to 127, it returns same object both time. In short obj1 and obj2 are pointing to same object and when we compare two object with == operator it returns true without any autoboxing.</p>
<p>In last example object are explicitly initialized and compared using equality operator , this time == return false because both one and anotherOne reference variables are pointing to different object.</p>
</blockquote>
<hr>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p><a href="https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html" target="_blank" rel="external">Oracle Docs</a><br><a href="http://javarevisited.blogspot.com/2012/07/auto-boxing-and-unboxing-in-java-be.html" target="_blank" rel="external">Javarevisited Tutorial: What is Autoboxing and Unboxing in Java</a><br><a href="http://javarevisited.blogspot.sg/2010/10/what-is-problem-while-using-in.html" target="_blank" rel="external">Javarevisited Tutorial: Why Comparing Integer using == in Java 5 is Bad?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/tuNnNbs.png&quot; style=&quot;max-height: 280px;&quot;/&gt;&lt;br&gt;Autoboxing and unboxing is introduced in Java 1.5 to automatically change the primitive type into the wrapper class and vice verse. With this feature, we can use primitives(&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;…) and wrapper classes(&lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;…) in many places interchangeably.&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://hackjutsu.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Internet Control Message Protocol (ICMP)</title>
    <link href="http://hackjutsu.com/2016/01/12/Internet%20Control%20Message%20Protocol%20(ICMP)/"/>
    <id>http://hackjutsu.com/2016/01/12/Internet Control Message Protocol (ICMP)/</id>
    <published>2016-01-13T02:00:00.000Z</published>
    <updated>2016-01-14T18:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Q: In which layer do <code>ping</code> and <code>traceroute</code> work?<br>A: Internet Control Message Protocol or <strong>ICMP</strong>.</p>
</blockquote>
<a id="more"></a>
<p>The <strong>ICMP</strong> is one of the main protocols of the <a href="https://en.wikipedia.org/wiki/Internet_protocol_suite" target="_blank" rel="external">Internet Protocol Suite</a>.  Unlike the transport protocols such as TCP and UDP, it is not typically used to exchange data between systems, nor is it regularly employed by end-user network applications.</p>
<p><strong>ICMP</strong> is used by network devices, like routers, to send messages to indicate whether a host or a service is available or not.  It is also utilized by some diagnostic tools like <code>ping</code> and <code>traceroute</code>.</p>
<hr>
<p><strong>Resource</strong><br><a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#cite_note-2" target="_blank" rel="external">Wikipedia: Internet Control Message Protocal</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Q: In which layer do &lt;code&gt;ping&lt;/code&gt; and &lt;code&gt;traceroute&lt;/code&gt; work?&lt;br&gt;A: Internet Control Message Protocol or &lt;strong&gt;ICMP&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Network" scheme="http://hackjutsu.com/tags/Network/"/>
    
  </entry>
  
</feed>
